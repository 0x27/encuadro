/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import com.barcodelib.barcode.QRCode;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import proyecto.clases.FileUpload;
import proyecto.clases.Global;
import proyecto.clases.MediaPanelAudio;
import proyecto.clases.prbQT;

/**
 *
 * @author SysAdmin
 */
public class AgregarObra2 extends javax.swing.JFrame {
    File file = null;
    String nombre = "";
    File audio = null,video = null, modelo = null;
    File[] files;
    //ProcesandoPeticion prc = new ProcesandoPeticion();
    
     
//    static {
//        if (!vtkNativeLibrary.LoadAllNativeLibraries()) {
//            for (vtkNativeLibrary lib : vtkNativeLibrary.values()) {
//                if (!lib.IsLoaded()) {
//                    System.out.println(lib.GetLibraryName() + " not loaded");
//                }
//            }
//        }
//        vtkNativeLibrary.DisableOutputWindow(null);
//    }
     
    /**
     * Creates new form AgregarObra2
     */
    public AgregarObra2() {    
        //prc = new ProcesandoPeticion();
        //prc.setLocationRelativeTo(null);                    
        Image ico = new ImageIcon(Global.directorioLocal + "\\museo.png").getImage();
        setIconImage(ico);
        initComponents();
        this.setLocationRelativeTo(null);
        Global.agMod = true;        
        Global.audio = false;
        Global.modelo3D = false;
        Global.video = false;
        Global.texto = false;
        Global.imagen = false;
        Global.animacion = false;
        /*vid_ver_btn.setEnabled(false);
        aud_ver_btn.setEnabled(false);
        mod_ver_btn.setEnabled(false);
        BotTexto.setEnabled(false);
        BotModelo.setEnabled(false);
        BotAnimacion.setEnabled(false);
        laba1.setEnabled(false);
        laba2.setEnabled(false);
        laba3.setEnabled(false);
        laba4.setEnabled(false);
        laba5.setEnabled(false);
        mod_txt.setEnabled(false);
        tex_txt.setEnabled(false);
        chk_animacion.setEnabled(false);
        chk_modelo.setEnabled(false);
        chk_texto.setEnabled(false);
        */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNomObra = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtExaminar = new javax.swing.JTextField();
        BotExaminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtAutObra = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tex_txt = new javax.swing.JTextArea();
        vid_txt = new javax.swing.JTextField();
        aud_txt = new javax.swing.JTextField();
        mod_txt = new javax.swing.JTextField();
        Titulo_Cont = new javax.swing.JLabel();
        vid_ver_btn = new javax.swing.JToggleButton();
        aud_ver_btn = new javax.swing.JToggleButton();
        mod_ver_btn = new javax.swing.JToggleButton();
        BotAceptar = new javax.swing.JButton();
        BotCancelar = new javax.swing.JButton();
        chk_video = new javax.swing.JCheckBox();
        BotVideo = new javax.swing.JButton();
        chk_audio = new javax.swing.JCheckBox();
        chk_modelo = new javax.swing.JCheckBox();
        chk_texto = new javax.swing.JCheckBox();
        BotAudio = new javax.swing.JButton();
        BotModelo = new javax.swing.JButton();
        BotTexto = new javax.swing.JButton();
        chk_animacion = new javax.swing.JCheckBox();
        laba1 = new javax.swing.JTextField();
        laba2 = new javax.swing.JTextField();
        laba3 = new javax.swing.JTextField();
        laba4 = new javax.swing.JTextField();
        laba5 = new javax.swing.JTextField();
        BotAnimacion = new javax.swing.JButton();
        BotExaminar1 = new javax.swing.JButton();

        jButton1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jButton1.setText("Continuar >>");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agregar Obra");
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(601, 810));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("2- Ingresa los datos requeridos sobre la Obra:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");

        txtNomObra.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Imagen:");

        txtExaminar.setEditable(false);
        txtExaminar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        BotExaminar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotExaminar.setText("Modificar");
        BotExaminar.setMaximumSize(new java.awt.Dimension(90, 25));
        BotExaminar.setMinimumSize(new java.awt.Dimension(90, 25));
        BotExaminar.setPreferredSize(new java.awt.Dimension(90, 25));
        BotExaminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotExaminarActionPerformed(evt);
            }
        });

        txtDescripcion.setColumns(20);
        txtDescripcion.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtDescripcion.setLineWrap(true);
        txtDescripcion.setRows(5);
        txtDescripcion.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtDescripcion);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Descripci√≥n:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Agregar Obra (2)");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Autor:");

        txtAutObra.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jPanel1.setPreferredSize(new java.awt.Dimension(543, 331));

        tex_txt.setEditable(false);
        tex_txt.setBackground(new java.awt.Color(240, 240, 240));
        tex_txt.setColumns(20);
        tex_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tex_txt.setLineWrap(true);
        tex_txt.setRows(5);
        tex_txt.setWrapStyleWord(true);
        jScrollPane2.setViewportView(tex_txt);

        vid_txt.setEditable(false);
        vid_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        aud_txt.setEditable(false);
        aud_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        mod_txt.setEditable(false);
        mod_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        Titulo_Cont.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Titulo_Cont.setText("3- Selecciona el tipo de Contenido a agregar:");

        vid_ver_btn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        vid_ver_btn.setText("Ver");
        vid_ver_btn.setToolTipText("Reproducir el Video cargado");
        vid_ver_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vid_ver_btnActionPerformed(evt);
            }
        });

        aud_ver_btn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        aud_ver_btn.setText("Ver");
        aud_ver_btn.setToolTipText("Reproducir el Audio cargado");
        aud_ver_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aud_ver_btnActionPerformed(evt);
            }
        });

        mod_ver_btn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        mod_ver_btn.setText("Ver");
        mod_ver_btn.setToolTipText("Visualizar el Modelo 3D cargado");
        mod_ver_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod_ver_btnActionPerformed(evt);
            }
        });

        BotAceptar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotAceptar.setText("Guardar");
        BotAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAceptarActionPerformed(evt);
            }
        });

        BotCancelar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotCancelar.setText("Cancelar");
        BotCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotCancelarActionPerformed(evt);
            }
        });

        chk_video.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        chk_video.setText("Video:");
        chk_video.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_videoActionPerformed(evt);
            }
        });

        BotVideo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotVideo.setText("Modificar");
        BotVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotVideoActionPerformed(evt);
            }
        });

        chk_audio.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        chk_audio.setText("Audio:");
        chk_audio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_audioActionPerformed(evt);
            }
        });

        chk_modelo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        chk_modelo.setText("Modelo 3D:");
        chk_modelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_modeloActionPerformed(evt);
            }
        });

        chk_texto.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        chk_texto.setText("Texto:");
        chk_texto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_textoActionPerformed(evt);
            }
        });

        BotAudio.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotAudio.setText("Modificar");
        BotAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAudioActionPerformed(evt);
            }
        });

        BotModelo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModelo.setText("Modificar");
        BotModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModeloActionPerformed(evt);
            }
        });

        BotTexto.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotTexto.setText("Modificar");
        BotTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotTextoActionPerformed(evt);
            }
        });

        chk_animacion.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        chk_animacion.setText("Animaci√≥n:");
        chk_animacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_animacionActionPerformed(evt);
            }
        });

        laba1.setEditable(false);
        laba1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        laba2.setEditable(false);
        laba2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        laba3.setEditable(false);
        laba3.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        laba4.setEditable(false);
        laba4.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        laba5.setEditable(false);
        laba5.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        BotAnimacion.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotAnimacion.setText("Modificar");
        BotAnimacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAnimacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(mod_ver_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(chk_animacion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(chk_video, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(chk_audio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(7, 7, 7)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(aud_ver_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(laba5, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(laba4, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(laba3, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(laba2, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(aud_txt)
                                                    .addComponent(vid_txt)
                                                    .addComponent(laba1, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(mod_txt))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(vid_ver_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(BotVideo, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                    .addComponent(BotAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BotAnimacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BotModelo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Titulo_Cont, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(chk_modelo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chk_texto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(7, 7, 7)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BotTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BotAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(Titulo_Cont, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vid_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vid_ver_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chk_video, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(aud_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(aud_ver_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BotAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(chk_audio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chk_animacion)
                    .addComponent(laba1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(laba2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laba3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotAnimacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(laba4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(laba5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chk_modelo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mod_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mod_ver_btn)
                        .addComponent(BotModelo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chk_texto)
                    .addComponent(BotTexto)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotCancelar)
                    .addComponent(BotAceptar))
                .addContainerGap())
        );

        BotExaminar1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotExaminar1.setText("Ver");
        BotExaminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotExaminar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(7, 7, 7)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(7, 7, 7)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtAutObra, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                                                .addComponent(txtNomObra))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(BotExaminar1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(BotExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtAutObra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomObra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BotExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BotExaminar1))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotExaminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotExaminarActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("JPG","jpg","JPEG","jpeg");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicaci√≥n del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            file = exam.getSelectedFile();
            
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE IMAGEN">
            try{
                String extension = file.getName().substring( file.getName().lastIndexOf(".") );

                if(extension.equals(".JPEG") || extension.equals(".jpeg") || extension.equals(".JPG") || extension.equals(".jpg")){
                    if(file.getName().length() >= 100){
                        txtExaminar.setBackground(Color.pink);
                        txtExaminar.setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
                        JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                    }else{
                        boolean √± = true;
                    String[] aC;
                    String Nombres = file.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("√±".equals (aC[i]) || "√ë".equals(aC[i]) || "√°".equals(aC[i])|| "√Å".equals(aC[i])|| "√©".equals(aC[i])|| "√â".equals(aC[i])|| "√≠".equals(aC[i])|| "√ç".equals(aC[i])|| "√≥".equals(aC[i])|| "√ì".equals(aC[i])|| "√∫".equals(aC[i])|| "√ö".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            txtExaminar.setText("");
                            file = null;
                        }
                    }
                    if(√±==true){
                        txtExaminar.setText(file.getName());
                        txtExaminar.setBackground(Color.white);
                        txtExaminar.setToolTipText(null);
                        Global.imagen = true; 
                    }}
                }else{
                    txtExaminar.setBackground(Color.pink);
                    txtExaminar.setToolTipText("S√≥lo se admiten archivos de formato JPEG");
                    JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato JPEG.", "Error de contenido", 2);
                }
            }catch(Exception ex){
                txtExaminar.setBackground(Color.pink);
                txtExaminar.setToolTipText("El archivo no existe");
                JOptionPane.showMessageDialog(null, "El archivo no existe.", "Error de contenido", 2);
            }
            //</editor-fold>            
        }
    }//GEN-LAST:event_BotExaminarActionPerformed

    private void BotVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotVideoActionPerformed
        // TODO add your handling code here:
//        MediaPanel mediaPanel = null;
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("MOV","mov");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicaci√≥n del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE VIDEO">
            video = exam.getSelectedFile();
            vid_txt.setText(video.getName());
            String extension = video.getName().substring( video.getName().lastIndexOf(".") );

            if(extension.equals(".mov") || extension.equals(".MOV")){
                if(video.getName().length() >= 100){
                    vid_txt.setBackground(Color.pink);
                    vid_txt.setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "Nombre de archivo demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean √± = true;
                    String[] aC;
                    String Nombres = video.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("√±".equals (aC[i]) || "√ë".equals(aC[i]) || "√°".equals(aC[i])|| "√Å".equals(aC[i])|| "√©".equals(aC[i])|| "√â".equals(aC[i])|| "√≠".equals(aC[i])|| "√ç".equals(aC[i])|| "√≥".equals(aC[i])|| "√ì".equals(aC[i])|| "√∫".equals(aC[i])|| "√ö".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            vid_txt.setText("");
                            video = null;
                            chk_video.setSelected(false);
                        }
                    }
                    if(√±==true){
                    if(Global.video == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituir√° el Video previamente seleccionado.\n¬øContinuar?") == JOptionPane.NO_OPTION){
                            return;
                        }
                    }else{
                        Global.video = true;
                    }
                    vid_txt.setBackground(Color.white);
                    vid_txt.setToolTipText(null);
                    chk_video.setSelected(true);
                    Global.fvid = video ;

                    //reproducir el contenido seleccionado
//                    if ( Global.fvid != null ){
//                        prbQT frame = new prbQT(Global.fvid.getName()); 
//                        frame.pack(); 
//                        frame.setVisible(true); 
//                        try { 
//                            frame.movie.start(); 
//                        } catch (Exception e) { 
//                            e.printStackTrace(); 
//                        } 
//                    }else{
//                        JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no est√° disponible.");
//                    }
                    
                }
            }}else{
//                vid_txt.setBackground(Color.pink);
//                vid_txt.setToolTipText("S√≥lo se admiten archivos de formato MOV");
//                JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato MOV.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                Global.video = true;
               // video = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotVideoActionPerformed

    private void BotAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAudioActionPerformed
        // TODO add your handling code here:
        MediaPanelAudio mediaPanel = null;
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("MP3","mp3");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicaci√≥n del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE AUDIO">
            audio = exam.getSelectedFile();
            aud_txt.setText(audio.getName());
            String extension = audio.getName().substring( audio.getName().lastIndexOf(".") );

            if(extension.equals(".MP3") || extension.equals(".mp3")){
                if(audio.getName().length() >= 100){
                    aud_txt.setBackground(Color.pink);
                    aud_txt.setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "Nombre de archivo demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean √± = true;
                    String[] aC;
                    String Nombres = audio.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("√±".equals (aC[i]) || "√ë".equals(aC[i]) || "√°".equals(aC[i])|| "√Å".equals(aC[i])|| "√©".equals(aC[i])|| "√â".equals(aC[i])|| "√≠".equals(aC[i])|| "√ç".equals(aC[i])|| "√≥".equals(aC[i])|| "√ì".equals(aC[i])|| "√∫".equals(aC[i])|| "√ö".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            aud_txt.setText("");
                            audio= null;
                             chk_audio.setSelected(false);
                        }
                    }
                    if(√±==true){
                    chk_audio.setSelected(true);
                    URL mediaURL = null;

                    if(Global.audio == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Ya hay un archivo de Audio previamente cargado.\n¬øDeseas sustituirlo?") == JOptionPane.NO_OPTION){
                            return;
                        }        
                    }
                    aud_txt.setBackground(Color.white);
                    aud_txt.setToolTipText(null);
                    Global.audio = true;

                    try{
                        mediaURL = audio.toURL();
                    }catch ( MalformedURLException malformedURLException ){
                        System.err.println( "No se pudo crear la URL." );
                    }

                    //reproducir el contenido seleccionado
                    if ( mediaURL != null ){
                        mediaPanel = new MediaPanelAudio( mediaURL );
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no est√° disponible.");
                    }
                }
                }}else{
                aud_txt.setBackground(Color.pink);
                aud_txt.setToolTipText("S√≥lo se admiten archivos de formato MP3");
                JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato MP3.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                Global.audio = false;
                audio = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotAudioActionPerformed

    private void BotTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotTextoActionPerformed
        // TODO add your handling code here:
        IngresarTexto it = new IngresarTexto();
        //if(txtNomObra.getText().equals("")){
        //    JOptionPane.showMessageDialog(rootPane, "Debe ingresar un nombre para la obra.");
        //}else{
            //if(txtExaminar.getText().equals("")){
            //    JOptionPane.showMessageDialog(rootPane, "Debe ingresar una imagen que represente la obra.");
            //}else{
                if(Global.texto == true){
                    //JOptionPane.showMessageDialog(rootPane, "Se sustituir√° el texto previamente ingresado.");
                    nombre = txtNomObra.getText();
                }else{
                    nombre = txtNomObra.getText();
                    it = new IngresarTexto();
                }
                Global.chk_texto_AgOb2 = chk_texto;
                Global.txt_texto_AgOb2 = tex_txt;
                it.setVisible(true);
            //}
        //}
    }//GEN-LAST:event_BotTextoActionPerformed

    private void BotModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModeloActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("POD","pod");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicaci√≥n del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE MODELO 3D">
            modelo = exam.getSelectedFile();
            mod_txt.setText(modelo.getName());
            String extension = modelo.getName().substring( modelo.getName().lastIndexOf(".") );

            if(extension.equals(".POD") || extension.equals(".pod")){
                if(modelo.getName().length() >= 100){
                    mod_txt.setBackground(Color.pink);
                    mod_txt.setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "Nombre de archivo demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean √± = true;
                    String[] aC;
                    String Nombres = modelo.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("√±".equals (aC[i]) || "√ë".equals(aC[i]) || "√°".equals(aC[i])|| "√Å".equals(aC[i])|| "√©".equals(aC[i])|| "√â".equals(aC[i])|| "√≠".equals(aC[i])|| "√ç".equals(aC[i])|| "√≥".equals(aC[i])|| "√ì".equals(aC[i])|| "√∫".equals(aC[i])|| "√ö".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            mod_txt.setText("");
                            modelo=null;
                             chk_modelo.setSelected(false);
                        }
                    }
                    if(√±==true){
                    chk_modelo.setSelected(true);

                    if(Global.modelo3D == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Ya hay un Modelo 3D previamente cargado.\n¬øDeseas sustituirlo?") == JOptionPane.NO_OPTION){
                            return;
                        }        
                    }
                    mod_txt.setBackground(Color.white);
                    mod_txt.setToolTipText(null);
                    Global.modelo3D = true;                    
                    
//                    vtkRenderer render = new vtkRenderer();
//                    vtkRenderWindow renderWindow = new vtkRenderWindow();
//                    renderWindow.AddRenderer(render);
//                    vtkRenderWindowInteractor renderWindowInteractor = new vtkRenderWindowInteractor();
//                    renderWindowInteractor.SetRenderWindow(renderWindow);
//                    vtkPLYReader mod = new vtkPLYReader();
//                    mod.SetFileName(modelo.getAbsolutePath());
//                    mod.Update();
//                    vtkElevationFilter colorIt = new vtkElevationFilter();
//                    colorIt.SetInput(mod.GetOutput());
//                    colorIt.SetLowPoint(0, 0, -1);
//                    colorIt.SetHighPoint(0, 0, 1);
//                    vtkPolyDataMapper point = new vtkPolyDataMapper();
//                    point.SetInputConnection(mod.GetOutputPort());
//                    vtkActor actor = new vtkActor();
//                    actor.SetMapper(point);
//                    render.AddActor(actor);
//                    render.SetBackground(1, 1, 1);
//                    renderWindow.SetSize(500, 500);
//                    renderWindow.SetPosition(450, 200);
//                    renderWindow.Render();
//                    renderWindowInteractor.Start();
//                    render.Delete();
//                    renderWindow.Delete();
//                    renderWindowInteractor.Delete();
//                    mod.Delete();
//                    colorIt.Delete();
//                    actor.Delete();
                }
            }}else{
                mod_txt.setBackground(Color.pink);
                mod_txt.setToolTipText("S√≥lo se admiten archivos de formato POD");
                JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato POD.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                mod_txt.setText("");
                Global.modelo3D = false;
                modelo = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotModeloActionPerformed

    private void BotCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotCancelarActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(rootPane, "Se perder√°n todos los cambios no guardados\n¬øCerrar ventana?") == JOptionPane.YES_OPTION){
            Global.agMod = false;
            this.dispose();
        }
    }//GEN-LAST:event_BotCancelarActionPerformed

    private void BotAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAceptarActionPerformed
          // TODO add your handling code here:
                int idOb = 0;
        boolean errorUpload = false;
        boolean errorValidacion = false;
        String dev = null;
        //autor
        if(txtAutObra.getText().length() <= 0){
            errorValidacion = true;
            txtAutObra.setBackground(Color.pink);
            txtAutObra.setToolTipText("El campo es obligatorio");
        }else if(txtAutObra.getText().length() > 200){
            errorValidacion = true;
            txtAutObra.setBackground(Color.pink);
            txtAutObra.setToolTipText("El texto excede el m√°ximo de 200 caracteres");
        }else{
            txtAutObra.setBackground(Color.white);
            txtAutObra.setToolTipText(null); 
        }
        
        //nombre
        if(txtNomObra.getText().length() <= 0){
            errorValidacion = true;
            txtNomObra.setBackground(Color.pink);
            txtNomObra.setToolTipText("El campo es obligatorio");
        }else if(txtNomObra.getText().length() > 200){
            errorValidacion = true;
            txtNomObra.setBackground(Color.pink);
            txtNomObra.setToolTipText("El texto excede el m√°ximo de 200 caracteres");
        }else{
            txtNomObra.setBackground(Color.white);
            txtNomObra.setToolTipText(null); 
        }
        
        //descripcion
        if(txtDescripcion.getText().length() <= 0){
            errorValidacion = true;
            txtDescripcion.setBackground(Color.pink);
            txtDescripcion.setToolTipText("El campo es obligatorio");
        }else if(txtDescripcion.getText().length() > 1500){
            errorValidacion = true;
            txtDescripcion.setBackground(Color.pink);
            txtDescripcion.setToolTipText("El texto excede el m√°ximo de 1500 caracteres");
        }else{
            txtDescripcion.setBackground(Color.white);
            txtDescripcion.setToolTipText(null); 
        }

        //imagen
        if(txtExaminar.getText().length() <= 0){
            errorValidacion = true;
            txtExaminar.setBackground(Color.pink);
            txtExaminar.setToolTipText("La Imagen es obligatoria");
        }else if(txtExaminar.getText().length() > 100){
            errorValidacion = true;
            txtExaminar.setBackground(Color.pink);
            txtExaminar.setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
        }else{
            txtExaminar.setBackground(Color.white);
            txtExaminar.setToolTipText(null); 
        }        
        
        if(errorValidacion == false){
           
                if(Global.imagen == true){
                   // prc.setVisible(true);
                    String idSal = Integer.toString(Global.IdSala);
                    try{
                        idOb = altaObra(txtNomObra.getText(), txtDescripcion.getText(), txtExaminar.getText(), idSal, txtAutObra.getText());
                    }catch(Exception e){
                       // prc.dispose();
                        JOptionPane.showMessageDialog(rootPane, "Error al guardar la Obra.\nInt√©ntalo de nuevo.");
                    }
                    
                    String io = Integer.toString(idOb);
                    try {
                        dev = agregarContenidoObra(idOb, "imagen", txtExaminar.getText());
                        //System.out.println(txtExaminar.getText()+ " dev dio "+dev);
                        if(dev.equals("-2") || dev.equals("-1")){
                            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al agregar la imagen.\nPor favor int√©ntalo de nuevo.");    
                            return;
                        }else{
                            FileUpload.upload(dev, file);
                        }
                    } catch (MalformedURLException ex) {
//                        prc.dispose();
                        JOptionPane.showMessageDialog(rootPane, "Error al guardar la Imagen.\nInt√©ntalo de nuevo.");
                        Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                        errorUpload = true;
                    } catch (IOException ex) {
//                        prc.dispose();
                        JOptionPane.showMessageDialog(rootPane, "Error al guardar la imagen.\nInt√©ntalo de nuevo.");
                        Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                        errorUpload = true;
                    }

                    int resultado = -2;
                    try{
                        resultado = generarDescriptor(Global.IdSala, idOb, file.getName());
                        System.out.println("mande id sala "+Global.IdSala+" idObra "+idOb+" el nombre del archivo "+file.getName()+" y me dio "+resultado);
                        Thread.sleep(3000);
                    }catch(Exception e){
                         System.out.println("en el catch");
                         System.out.println("mande id sala "+Global.IdSala+" idObra "+idOb+" el nombre del archivo "+file.getName()+" y me dio "+resultado);
                        
                        //JOptionPane.showMessageDialog(rootPane, "Error al comunicarse con el servidor.\nInt√©ntalo de nuevo.");
                        e.printStackTrace();
                    }

                    //audio
                    if(Global.audio == true){
                        try {
                            dev = agregarContenidoObra(idOb, "audio", audio.getName());
                            if(dev.equals("-2") || dev.equals("-1")){
                                JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al agregar el audio.\nPor favor int√©ntalo de nuevo.");    
                                return;
                            }else{
                                FileUpload.upload(dev, audio);
                            }
                        } catch (MalformedURLException ex) {
//                            prc.dispose();
                            JOptionPane.showMessageDialog(rootPane, "Error al guardar el Audio.\nInt√©ntalo de nuevo.");
                            Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                            errorUpload = true;
                        } catch (IOException ex) {
//                            prc.dispose();
                            JOptionPane.showMessageDialog(rootPane, "Error al guardar el Audio.\nInt√©ntalo de nuevo.");
                            Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                            errorUpload = true;
                        }
                    }

                    //video
                    if(Global.video == true){
                        try {
                            dev = agregarContenidoObra(idOb, "video", video.getName());
                            if(dev.equals("-2") || dev.equals("-1")){
                                JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al agregar el video.\nPor favor int√©ntalo de nuevo.");    
                                return;
                            }else{
                                FileUpload.upload(dev, video);
                            }
                        } catch (MalformedURLException ex) {
//                            prc.dispose();
                            JOptionPane.showMessageDialog(rootPane, "Error al guardar el Video.\nInt√©ntalo de nuevo.");
                            Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                            errorUpload = true;
                        } catch (IOException ex) {
//                            prc.dispose();
                            JOptionPane.showMessageDialog(rootPane, "Error al guardar el Video.\nInt√©ntalo de nuevo.");
                            Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                            errorUpload = true;
                        }
                    }

                    //modelo
                    if(Global.modelo3D == true){
                        try {
                            dev = agregarContenidoObra(idOb, "modelo", modelo.getName());
                            if(dev.equals("-2") || dev.equals("-1")){
                                JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al agregar el modelo 3D.\nPor favor int√©ntalo de nuevo.");    
                                return;
                            }else{
                                FileUpload.upload(dev, modelo);
                            }
                        } catch (MalformedURLException ex) {
//                            prc.dispose();
                            JOptionPane.showMessageDialog(rootPane, "Error al guardar el Modelo 3D.\nInt√©ntalo de nuevo.");
                            Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                            errorUpload = true;
                        } catch (IOException ex) {
//                            prc.dispose();
                            JOptionPane.showMessageDialog(rootPane, "Error al guardar el Modelo 3D.\nInt√©ntalo de nuevo.");
                            Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                            errorUpload = true;
                        }
                    }

                    //animacion
                    if(Global.animacion == true){
                        String nombre = "";
                        int c = files.length;                       
                        File f = null;    
                        boolean error = false;
                        nombre = laba1.getText() + "=>" + laba2.getText() + "=>" + laba3.getText() + "=>" + laba4.getText() + "=>" + laba5.getText();
                        dev = agregarContenidoObra(idOb, "animacion", nombre);
                        System.out.println("anima: " + dev);
                        String[] s = dev.split("=>");
                        for (int i=0; i<c; i++){
                            f = files[i].getAbsoluteFile();
                            try {
                                FileUpload.upload(s[i], f);
                            } catch (MalformedURLException ex) {
                                error = true;
                                Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                                errorUpload = true;
                            } catch (IOException ex) {
                                error = true;
                                Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                                errorUpload = true;
                            }
                        }
                        files = null;

                        if(error){
//                            prc.dispose();
                            JOptionPane.showMessageDialog(rootPane, "Error al guardar las Animaciones.\nInt√©ntalo de nuevo.");
                        }
                   }

                    //texto
                    if(Global.texto == true){
                        agregarContenidoObra(idOb, "texto", Global.stringTexto);
                    }
                    
//                    prc.dispose();
                    if(errorUpload == false){
                        convertirvideo(idOb);
                        if(JOptionPane.showConfirmDialog(rootPane, "Obra guardada con √©xito.\n¬øDeseas crear una nueva Obra?") == JOptionPane.YES_OPTION){
                            this.dispose();
                            AgregarObra agOb = new AgregarObra();
                            agOb.setVisible(true);
                        }else{
                            this.dispose();
                        }
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "Ocurrieron errores al guardar la Obra. \nVerifica si se guardaron todos los contenidos.", "Error", 2);
                    }
                }
            
        }else{
            JOptionPane.showMessageDialog(rootPane, "El formulario contiene errores.\nCorr√≠gelos para continuar", "Error en formulario", 2);
        }        
                                             
                     

    }//GEN-LAST:event_BotAceptarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        Global.agMod = false;
    }//GEN-LAST:event_formWindowClosing

    private void chk_videoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_videoActionPerformed
        // TODO add your handling code here:
        if(Global.video == true){ //cuando ya hay un video cargado, permite borrarlo
            chk_video.setSelected(true);
            
            if(chk_video.isSelected()){
                if(JOptionPane.showConfirmDialog(rootPane, "¬øDeseas descartar el Video cargado?") == JOptionPane.YES_OPTION){
                    chk_video.setSelected(false);
                    Global.video = false;
                    vid_txt.setText(null);
                }
            }else{
                chk_video.setSelected(false);
                Global.video = false;
            }
        }else{ //si no hay video cargado, no permite activar
            if(chk_video.isSelected()){
                chk_video.setSelected(false);
            }
            BotVideo.doClick(); //abre la ventana para buscar un archivo
        }
    }//GEN-LAST:event_chk_videoActionPerformed

    private void chk_audioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_audioActionPerformed
        // TODO add your handling code here:
        if(Global.audio == true){ //cuando ya hay un audio cargado, permite borrarlo
            chk_audio.setSelected(true);
            
            if(chk_audio.isSelected()){
                if(JOptionPane.showConfirmDialog(rootPane, "¬øDeseas descartar el Audio cargado?") == JOptionPane.YES_OPTION){
                    chk_audio.setSelected(false);
                    Global.audio = false;
                    aud_txt.setText(null);
                }
            }else{
                chk_audio.setSelected(false);
                Global.audio = false;
            }
        }else{ //si no hay audio cargado, no permite activar
            if(chk_audio.isSelected()){
                chk_audio.setSelected(false);
            }
            BotAudio.doClick(); //abre la ventana para buscar un archivo
        }
    }//GEN-LAST:event_chk_audioActionPerformed

    private void chk_textoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_textoActionPerformed
        // TODO add your handling code here:
        if(Global.texto == true){ //cuando ya hay texto cargado, permite borrarlo
            chk_texto.setSelected(true);
            
            if(JOptionPane.showConfirmDialog(rootPane, "¬øDeseas descartar el Texto cargado?") == JOptionPane.YES_OPTION){
                chk_texto.setSelected(false);
                Global.texto = false;
                tex_txt.setText(null);
            }
        }else{ //si no hay texto cargado, no permite activar
            if(chk_texto.isSelected()){
                chk_texto.setSelected(false);
            }
            BotTexto.doClick(); //abre la ventana para ingresar texto
        }
    }//GEN-LAST:event_chk_textoActionPerformed

    private void chk_modeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_modeloActionPerformed
        // TODO add your handling code here:
        if(Global.modelo3D == true){ //cuando ya hay un modelo cargado, permite borrarlo
            chk_modelo.setSelected(true);
            
            if(chk_modelo.isSelected()){
                if(JOptionPane.showConfirmDialog(rootPane, "¬øDeseas descartar el Modelo 3D cargado?") == JOptionPane.YES_OPTION){
                    chk_modelo.setSelected(false);
                    Global.modelo3D = false;
                }
            }else{
                chk_modelo.setSelected(false);
                Global.modelo3D = false;
            }
        }else{ //si no hay modelo cargado, no permite activar
            if(chk_modelo.isSelected()){
                chk_modelo.setSelected(false);
            }
            BotModelo.doClick(); //abre la ventana para buscar un archivo
        }
    }//GEN-LAST:event_chk_modeloActionPerformed

    private void BotAnimacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAnimacionActionPerformed
        // TODO add your handling code here:
         FileNameExtensionFilter filtro = new FileNameExtensionFilter("POD","pod");
         JFileChooser chooser = new JFileChooser();
         chooser.setFileFilter(filtro);
         chooser.setMultiSelectionEnabled(true);
         int returnVal = chooser.showOpenDialog(rootPane);
         
        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE MODELO 3D">
            files = chooser.getSelectedFiles();
            File ani = null;
            int c = files.length;
            JTextField[] fields = new JTextField[5];
            fields[0] = laba1;
            fields[1] = laba2;
            fields[2] = laba3;
            fields[3] = laba4;
            fields[4] = laba5;
            
            if(c != 5 ){
                JOptionPane.showMessageDialog(null, "Debes seleccionar cinco modelos para formar la animaci√≥n completa.");
                files = null;
            }else{
                for (int i = 0; i<c; i++){
                  //  System.out.println(files[i].getName());
                    ani = files[i].getAbsoluteFile(); 
                    
                    String extension = ani.getName().substring( ani.getName().lastIndexOf(".") );
            
                    if(extension.equals(".POD") || extension.equals(".pod")){
                        fields[i].setText(files[i].getName());
                        
                        if(ani.getName().length() >= 100){
                            fields[i].setBackground(Color.pink);
                            fields[i].setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");                            
                            JOptionPane.showMessageDialog(rootPane, "Nombre de archivo demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                        }else{
                            boolean √± = true;
                    String[] aC;
                    String Nombres = files[i].getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int u = 0; u<=f; u++){
                        if("√±".equals (aC[u]) || "√ë".equals(aC[u]) || "√°".equals(aC[u])|| "√Å".equals(aC[u])|| "√©".equals(aC[u])|| "√â".equals(aC[u])|| "√≠".equals(aC[u])|| "√ç".equals(aC[u])|| "√≥".equals(aC[u])|| "√ì".equals(aC[u])|| "√∫".equals(aC[u])|| "√ö".equals(aC[u])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            Global.animacion = false;
                            files = null;
                            laba1.setText("");
                            laba2.setText("");
                            laba3.setText("");
                            laba4.setText("");
                            laba5.setText("");
                             chk_animacion.setSelected(false);
                            c = i;
                            
                        }
                    }
                    if(√±==true){
                            fields[i].setBackground(Color.white);
                            fields[i].setToolTipText(null);
                            chk_animacion.setSelected(true);
                            Global.animacion = true;                            
                        }   
                    }}else{
                        JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato POD.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                        Global.animacion = false;
                        laba1.setText("");
                            laba2.setText("");
                            laba3.setText("");
                            laba4.setText("");
                            laba5.setText("");
                             chk_animacion.setSelected(false);
                             c = i;
                        files = null;    
                   }
                }
            }
            //</editor-fold>   
        }
    }//GEN-LAST:event_BotAnimacionActionPerformed

    private void vid_ver_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vid_ver_btnActionPerformed
        // TODO add your handling code here:
        if(vid_txt.getText().length() > 0){
            if ( Global.fvid != null ){
                prbQT frame = new prbQT(Global.fvid.getName());
                frame.pack();
                frame.setVisible(true);
                frame.setAlwaysOnTop(true);
                try {
                    frame.movie.start();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no est√° disponible.");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Debes seleccionar un archivo para visualizarlo.");
        }

    }//GEN-LAST:event_vid_ver_btnActionPerformed

    private void aud_ver_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aud_ver_btnActionPerformed
        // TODO add your handling code here:
        if(aud_txt.getText().length() > 0){
            MediaPanelAudio mediaPanel = null;
            URL mediaURL = null;
            try{
                mediaURL = audio.toURL();
            }catch ( MalformedURLException malformedURLException ){
                System.err.println( "No se pudo crear la URL" );
            }

            if ( mediaURL != null ){
                mediaPanel = new MediaPanelAudio( mediaURL );
            
            }else{
                JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no est√° disponible.");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Selecciona un archivo para visualizarlo.");
        }
    }//GEN-LAST:event_aud_ver_btnActionPerformed

    private void mod_ver_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod_ver_btnActionPerformed
        // TODO add your handling code here:
        if(mod_txt.getText().length() > 0){/*
            vtkRenderer render = new vtkRenderer();
            vtkRenderWindow renderWindow = new vtkRenderWindow();
            renderWindow.AddRenderer(render);
            vtkRenderWindowInteractor renderWindowInteractor = new vtkRenderWindowInteractor();
            renderWindowInteractor.SetRenderWindow(renderWindow);
            vtkPLYReader mod = new vtkPLYReader();
            mod.SetFileName(Global.filem.getAbsolutePath());
            mod.Update();
            vtkElevationFilter colorIt = new vtkElevationFilter();
            colorIt.SetInput(mod.GetOutput());
            colorIt.SetLowPoint(0, 0, -1);
            colorIt.SetHighPoint(0, 0, 1);
            vtkPolyDataMapper point = new vtkPolyDataMapper();
            point.SetInputConnection(mod.GetOutputPort());
            vtkActor actor = new vtkActor();
            actor.SetMapper(point);
            render.AddActor(actor);
            render.SetBackground(1, 1, 1);
            renderWindow.SetSize(500, 500);
            renderWindow.SetPosition(450, 200);
            renderWindow.Render();
            renderWindowInteractor.Start();
            render.Delete();
            renderWindow.Delete();
            renderWindowInteractor.Delete();
            mod.Delete();
            colorIt.Delete();
            actor.Delete();*/
        }else{
            JOptionPane.showMessageDialog(rootPane, "Selecciona un archivo para visualizarlo.");
        }
    }//GEN-LAST:event_mod_ver_btnActionPerformed

    private void BotExaminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotExaminar1ActionPerformed
        // TODO add your handling code here:
        if(txtExaminar.getText().length() > 0){
            try {
                ImageIcon img = new ImageIcon (file.toURL());   
                int h = img.getIconHeight();
                int w = img.getIconWidth();
                Global.lab.setSize(w, h);
                Global.lab.setIcon(img);
                ImagenLabel il = new ImagenLabel();
                il.setSize(w, h);
                il.setVisible(true);
                il.setAlwaysOnTop(true);
            } catch (MalformedURLException ex) {
                //<---- Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Debes seleccionar un archivo para visualizarlo.");
        }
    }//GEN-LAST:event_BotExaminar1ActionPerformed

    private void chk_animacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_animacionActionPerformed
        // TODO add your handling code here:
        if(Global.animacion == true){ //cuando ya hay una animaci√≥n cargada, permite borrarla
            chk_animacion.setSelected(true);
            
            if(chk_animacion.isSelected()){
                if(JOptionPane.showConfirmDialog(rootPane, "¬øDeseas descartar la Animaci√≥n cargada?") == JOptionPane.YES_OPTION){
                    chk_animacion.setSelected(false);
                    Global.animacion = false;
                    laba1.setText(null);
                    laba2.setText(null);
                    laba3.setText(null);
                    laba4.setText(null);
                    laba5.setText(null);
                }
            }else{
                chk_animacion.setSelected(false);
                Global.animacion = false;
            }
        }else{ //si no hay animaci√≥n cargada, no permite activar
            if(chk_animacion.isSelected()){
                chk_animacion.setSelected(false);
            }
            BotAnimacion.doClick(); //abre la ventana para buscar un archivo
        }
    }//GEN-LAST:event_chk_animacionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarObra2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarObra2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarObra2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarObra2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarObra2().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotAceptar;
    private javax.swing.JButton BotAnimacion;
    private javax.swing.JButton BotAudio;
    private javax.swing.JButton BotCancelar;
    private javax.swing.JButton BotExaminar;
    private javax.swing.JButton BotExaminar1;
    private javax.swing.JButton BotModelo;
    private javax.swing.JButton BotTexto;
    private javax.swing.JButton BotVideo;
    private javax.swing.JLabel Titulo_Cont;
    private javax.swing.JTextField aud_txt;
    private javax.swing.JToggleButton aud_ver_btn;
    private javax.swing.JCheckBox chk_animacion;
    private javax.swing.JCheckBox chk_audio;
    private javax.swing.JCheckBox chk_modelo;
    private javax.swing.JCheckBox chk_texto;
    private javax.swing.JCheckBox chk_video;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField laba1;
    private javax.swing.JTextField laba2;
    private javax.swing.JTextField laba3;
    private javax.swing.JTextField laba4;
    private javax.swing.JTextField laba5;
    private javax.swing.JTextField mod_txt;
    private javax.swing.JToggleButton mod_ver_btn;
    private javax.swing.JTextArea tex_txt;
    private javax.swing.JTextField txtAutObra;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtExaminar;
    private javax.swing.JTextField txtNomObra;
    private javax.swing.JTextField vid_txt;
    private javax.swing.JToggleButton vid_ver_btn;
    // End of variables declaration//GEN-END:variables


    private static String agregarContenidoObra(int idObra, java.lang.String tipo, java.lang.String nombre) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.agregarContenidoObra(idObra, tipo, nombre);
    }

    private static int altaObra(java.lang.String nombreSala, java.lang.String descripcionSala, java.lang.String imagen, java.lang.String idSala, java.lang.String autorObra) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.altaObra(nombreSala, descripcionSala, imagen, idSala, autorObra);
    }

    private static int generarDescriptor(int idSala, int idObra, java.lang.String nombreArchivo) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.generarDescriptor(idSala, idObra, nombreArchivo);
    }

    private static String convertirvideo(int idObra) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.convertirvideo(idObra);
    }

    private static String convertirimagen(int idObra) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.convertirimagen(idObra);
    }

}
  
