/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import proyecto.clases.FileUpload;
import proyecto.clases.Global;
import proyecto.clases.MediaPanelAudio;
import proyecto.clases.prbQT;
import vtk.vtkActor;
import vtk.vtkElevationFilter;
import vtk.vtkNativeLibrary;
import vtk.vtkPLYReader;
import vtk.vtkPolyDataMapper;
import vtk.vtkRenderWindow;
import vtk.vtkRenderWindowInteractor;
import vtk.vtkRenderer;

/**
 *
 * @author SysAdmin
 */
public class modZi extends javax.swing.JFrame {
    private DefaultListModel modListaZonas = new DefaultListModel();
    String[] sep, sepObra;
    File audio = null,video = null, modelo = null;
    boolean vacio = false;
    ProcesandoPeticion prc = new ProcesandoPeticion();
    static {
        if (!vtkNativeLibrary.LoadAllNativeLibraries()) {
            for (vtkNativeLibrary lib : vtkNativeLibrary.values()) {
                if (!lib.IsLoaded()) {
                    System.out.println(lib.GetLibraryName() + " not loaded");
                }
            }
        }
        vtkNativeLibrary.DisableOutputWindow(null);
    }
    //boolean modif_zona = false, modif_audio = false, modif_video = false, modif_modelo = false, modif_texto = false; //para controlar qué se modific´ó
    
    /**
     * Creates new form modZi
     */
    public modZi() {
        Image ico = new ImageIcon(Global.directorioLocal + "\\museo.png").getImage();
        setIconImage(ico);
        initComponents();
        prc.setLocationRelativeTo(null);
        prc.setVisible(true);
        this.setLocationRelativeTo(null);
        ListaZonas.setModel(modListaZonas);
        CargarLista();
        makevisible(false);
        
        if(Global.nomObra != null){
            LabNomObra2.setText(Global.nomObra);
        }else{
            LabNomObra2.setText("-");
        }
        
        File path = new File(Global.directorioLocal + "/imagen_default.jpg");
        BufferedImage read = null;
        try {
            read = ImageIO.read(path);
        } catch (IOException ex) {
            Logger.getLogger(elimZi.class.getName()).log(Level.SEVERE, null, ex);
            prc.dispose();
        }
        //imagen por defecto de label Imagen
        CambiarImagenLabel(read, labIma);
        Global.label_imagen = labIma;
        prc.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ListaZonas = new javax.swing.JList();
        BotCancelar = new javax.swing.JButton();
        BotAceptar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        labIma = new javax.swing.JLabel();
        LabNroZona = new javax.swing.JLabel();
        LabNroZona2 = new javax.swing.JLabel();
        LabNomObra = new javax.swing.JLabel();
        LabNomObra2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        LabVideo2 = new javax.swing.JTextField();
        LabVideo1 = new javax.swing.JLabel();
        LabAudio1 = new javax.swing.JLabel();
        BotVerVideo = new javax.swing.JButton();
        BotModVideo = new javax.swing.JButton();
        LabAudio2 = new javax.swing.JTextField();
        BotVerAudio = new javax.swing.JButton();
        BotModAudio = new javax.swing.JButton();
        LabMod3D = new javax.swing.JLabel();
        LabModelo2 = new javax.swing.JTextField();
        BotVerModelo = new javax.swing.JButton();
        BotModModelo = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        LabTexto2 = new javax.swing.JTextArea();
        LabText = new javax.swing.JLabel();
        BotModTexto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modificar Zona de Interés");
        setAlwaysOnTop(true);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        ListaZonas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListaZonasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ListaZonas);

        BotCancelar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotCancelar.setText("Cancelar");
        BotCancelar.setToolTipText("Descartar los cambios y cerrar ventana");
        BotCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotCancelarActionPerformed(evt);
            }
        });

        BotAceptar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotAceptar.setText("Guardar");
        BotAceptar.setToolTipText("Guardar los cambios realizados");
        BotAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAceptarActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jButton1.setText("<<Atrás");
        jButton1.setToolTipText("Volver a la selección de Obra");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Modificar Zona de Interés (3 de 3)");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("3- Seleccione de la lista la Zona de Interés que desee modificar:");

        labIma.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        labIma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labIma.setToolTipText("Redibujar Zona de Interés");
        labIma.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen"));
        labIma.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        labIma.setOpaque(true);
        labIma.setPreferredSize(new java.awt.Dimension(256, 234));
        labIma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labImaMouseClicked(evt);
            }
        });

        LabNroZona.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabNroZona.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabNroZona.setText("Zona n°:");

        LabNroZona2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabNroZona2.setText("-");

        LabNomObra.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabNomObra.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabNomObra.setText("Obra:");

        LabNomObra2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabNomObra2.setText("-");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labIma, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LabNroZona, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                            .addComponent(LabNomObra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabNomObra2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LabNroZona2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabNomObra)
                    .addComponent(LabNomObra2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabNroZona)
                    .addComponent(LabNroZona2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labIma, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Contenidos"));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        LabVideo2.setEditable(false);
        LabVideo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabVideo2ActionPerformed(evt);
            }
        });

        LabVideo1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabVideo1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabVideo1.setText("Video:");

        LabAudio1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabAudio1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabAudio1.setText("Audio:");

        BotVerVideo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotVerVideo.setText("Ver");
        BotVerVideo.setToolTipText("Reproducir el Video asociado");
        BotVerVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotVerVideoActionPerformed(evt);
            }
        });

        BotModVideo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModVideo.setText("Modificar");
        BotModVideo.setToolTipText("Modificar el Video actual");
        BotModVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModVideoActionPerformed(evt);
            }
        });

        LabAudio2.setEditable(false);

        BotVerAudio.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotVerAudio.setText("Ver");
        BotVerAudio.setToolTipText("Reproducir el Audio asociado");
        BotVerAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotVerAudioActionPerformed(evt);
            }
        });

        BotModAudio.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModAudio.setText("Modificar");
        BotModAudio.setToolTipText("Modificar el Audio actual");
        BotModAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModAudioActionPerformed(evt);
            }
        });

        LabMod3D.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabMod3D.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabMod3D.setText("Modelo 3D:");

        LabModelo2.setEditable(false);

        BotVerModelo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotVerModelo.setText("Ver");
        BotVerModelo.setToolTipText("Mostrar el Modelo 3D asociado");
        BotVerModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotVerModeloActionPerformed(evt);
            }
        });

        BotModModelo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModModelo.setText("Modificar");
        BotModModelo.setToolTipText("Modificar el Modelo 3D actual");
        BotModModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModModeloActionPerformed(evt);
            }
        });

        LabTexto2.setEditable(false);
        LabTexto2.setBackground(new java.awt.Color(240, 240, 240));
        LabTexto2.setColumns(20);
        LabTexto2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabTexto2.setLineWrap(true);
        LabTexto2.setRows(5);
        LabTexto2.setWrapStyleWord(true);
        jScrollPane3.setViewportView(LabTexto2);

        LabText.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabText.setText("Texto:");

        BotModTexto.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModTexto.setText("Modificar");
        BotModTexto.setToolTipText("Modificar el Texto actual");
        BotModTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModTextoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(LabText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(LabMod3D, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(LabAudio1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LabVideo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(LabVideo2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotVerVideo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotModVideo))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(LabAudio2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotVerAudio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotModAudio))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(LabModelo2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotVerModelo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotModModelo)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BotModTexto)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LabVideo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BotVerVideo)
                        .addComponent(BotModVideo))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(LabVideo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabAudio1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LabAudio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BotVerAudio)
                        .addComponent(BotModAudio)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabMod3D)
                    .addComponent(LabModelo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotVerModelo)
                    .addComponent(BotModModelo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotModTexto)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 985, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 985, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(3, 3, 3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BotAceptar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(BotCancelar))
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BotCancelar)
                            .addComponent(BotAceptar)
                            .addComponent(jButton1)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ListaZonasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListaZonasValueChanged
        // TODO add your handling code here:
        prc.setVisible(true);  
        Global.modif_zona = false;       
        
        Global.idZona = Integer.parseInt((String) ListaZonas.getSelectedValue()); //id de la zona de interes seleccionada
        LabNomObra2.setText(Global.nomObra);
        LabNroZona2.setText(Integer.toString(Global.idZona));
        
        String obra = getContenidoObra(Global.nomObra);
        sepObra = obra.split("=>");
        Global.idObra = Integer.parseInt(sepObra[0]);
        Global.nomImagen = sepObra[5]; //nombre de imagen de la obra
        
        String contenidos = getContenidoZona(Global.idZona);
        sep = contenidos.split("=>");
        File path = null;
        path = new File(Global.directorioTemporal + "/imatmp.jpg");
        try {
            FileUpload.download(Global.nomImagen, path);
        } catch (MalformedURLException ex) {
            prc.dispose();
            Logger.getLogger(elimZi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            prc.dispose();
            Logger.getLogger(elimZi.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedImage read = null;
        try {
            read = ImageIO.read(path);
        } catch (IOException ex) {
            prc.dispose();
            Logger.getLogger(elimZi.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //cargar las zonas de interes sobre la imagen
        Graphics2D g = (Graphics2D) read.getGraphics();
        g.setColor(new Color(200, 0, 0));
        g.setStroke(new BasicStroke(5f));
        g.drawRect(Integer.parseInt(sep[8]), Integer.parseInt(sep[9]), Integer.parseInt(sep[7]), Integer.parseInt(sep[6]));
        
        //cambiar imagen de la obra
        CambiarImagenLabel(read, labIma);
        
        //cargar los contenidos
        makevisible(true);
        mostrarContenido(LabAudio2, sep[1], "audio");
        mostrarContenido(LabVideo2, sep[2], "video");
        mostrarContenido(LabModelo2, sep[4], "modelo");
        
        if(sep[3].equals("null")) {
            LabTexto2.setText("No existe contenido.");
        }else {
            LabTexto2.setText(sep[3]);
        }
        prc.dispose();
    }//GEN-LAST:event_ListaZonasValueChanged

    private void BotCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotCancelarActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(rootPane, "Se perderán los datos no guardados.\n¿Cerrar formulario?") == JOptionPane.YES_OPTION){
            Global.zmod = false;
            Global.video = false;
            Global.audio = false;
            Global.texto = false;
            Global.modelo3D = false;
            Global.stringTexto = null;
            this.setVisible(false);
        }
    }//GEN-LAST:event_BotCancelarActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        if(Global.texto == true) {
            LabTexto2.setText(Global.stringTexto);
        }
        
        if(vacio == true){ //cierra la ventana y vuelve a la anterior, si la Obra no tiene Zonas
            Global.nomObra = null;
            this.setVisible(false);
            ZonaInteresOb zio = new ZonaInteresOb(this.getTitle());
            zio.setVisible(true);            
        }
    }//GEN-LAST:event_formComponentShown

    private void BotAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAceptarActionPerformed
        // TODO add your handling code here:
        int anduvo = 0;
     //   int aux = -1;
        String dev = null;
        if("No existe contenido.".equals(LabAudio2.getText()) && "No existe contenido.".equals(LabVideo2.getText()) && "No existe contenido.".equals(LabModelo2.getText()) && "No existe contenido.".equals(LabTexto2.getText())) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar al menos un tipo de contenido.", "Error en el formulario", JOptionPane.WARNING_MESSAGE);
        }else{
            prc.setVisible(true);
            
            if(Global.modif_zona == true){
                int h, w, x, y;
                h = (int) Global.rrr.getHeight();
                w = (int) Global.rrr.getWidth();
                x = (int) Global.rrr.getX();
                y = (int) Global.rrr.getY();
               /* aux =*/ modificarZona(Global.idZona, h, w, x, y);
            
               /* if(aux == 0){
                    if(anduvo == 0){
                        anduvo = 0;
                    }else{
                        anduvo = -1;
                    }
                }else{
                    anduvo = -1;
                }*/
            }
                            
            if(Global.audio == true){
                /*aux =*/
             /*   if(aux == 0){
                    if(anduvo == 0){
                        anduvo = 0;
                    }else{
                        anduvo = -1;
                    }
                }else{
                    anduvo = -1;
                }*/
                
                try {
                    dev = agregarContenidoZona(Integer.parseInt(sep[0]), "audio", audio.getName());
                    if(dev.equals("-2") || dev.equals("-1")){
                        JOptionPane.showMessageDialog(rootPane, "Ocurrió un error al agregar el audio.\nPor favor inténtalo de nuevo.");    
                        return;
                    }
                    else{
                        FileUpload.upload(dev, audio);
                    }
                } catch (MalformedURLException ex) {
                    Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                    prc.dispose();
                } catch (IOException ex) {
                    Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                    prc.dispose();
                }
            }
            
            if(Global.video == true){
               /* aux =*/
                
                /*if(aux == 0){
                    if(anduvo == 0){
                        anduvo = 0;
                    }else{
                        anduvo = -1;
                    }
                }else{
                    anduvo = -1;
                }*/
                
                try {
                    dev = agregarContenidoZona(Integer.parseInt(sep[0]), "video", video.getName());
                    if(dev.equals("-2") || dev.equals("-1")){
                        JOptionPane.showMessageDialog(rootPane, "Ocurrió un error al agregar el video.\nPor favor inténtalo de nuevo.");    
                        return;
                    }
                    else{
                        FileUpload.upload(dev, video);
                    }
                } catch (MalformedURLException ex) {
                    Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                    prc.dispose();
                } catch (IOException ex) {
                    Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                    prc.dispose();
                }
            }
            
            if(Global.texto == true){
               /* aux =*/ agregarContenidoZona(Integer.parseInt(sep[0]), "texto", Global.stringTexto);
                
               /* if(aux == 0){
                    if(anduvo == 0){
                        anduvo = 0;
                    }else{
                        anduvo = -1;
                    }
                }else{
                    anduvo = -1;
                }*/
            }
            
            if(Global.modelo3D == true){
               /* aux = */
                
               /* if(aux == 0){
                    if(anduvo == 0){
                        anduvo = 0;
                    }else{
                        anduvo = -1;
                    }
                }else{
                    anduvo = -1;
                }*/
                
                try {
                    dev = agregarContenidoZona(Integer.parseInt(sep[0]), "modelo", modelo.getName());
                    System.out.println("m: "+ dev);
                    if(dev.equals("-2") || dev.equals("-1")){
                        JOptionPane.showMessageDialog(rootPane, "Ocurrió un error al agregar el modelo 3D.\nPor favor inténtalo de nuevo.");    
                        return;
                    }
                    else{
                        FileUpload.upload(dev, modelo);
                    }
                } catch (MalformedURLException ex) {
                    Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                    prc.dispose();
                } catch (IOException ex) {
                    Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                    prc.dispose();
                }
            }
            prc.dispose();
            
            if(anduvo == 0){
                Global.video = false;
                Global.audio = false;
                Global.texto = false;
                Global.modelo3D = false;
                Global.stringTexto = null;
                Global.zmod = false;
                
                if(JOptionPane.showConfirmDialog(rootPane, "La Zona de Interés fue modificada correctamente.\n¿Deseas modificar otra?") == JOptionPane.YES_OPTION){
                    this.dispose();
                    Global.zmod = true;
                    ZonaInteresSal zis = new ZonaInteresSal("Modificar Zona de Interés");
                    zis.setVisible(true);
                }else{
                    this.dispose();
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "No se han podido guardar los cambios en la Zona de Interés.\nPor favor inténtalo de nuevo.");
            }
        }
    }//GEN-LAST:event_BotAceptarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(rootPane, "Se perderán todos los cambios sin guardar.\n¿Volver a la ventana anterior?") == JOptionPane.YES_OPTION){
            Global.nomObra = null;
            ZonaInteresOb zob = new ZonaInteresOb(this.getTitle());
            zob.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void BotVerVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotVerVideoActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(LabVideo2.getText())){
            
            if(!Global.video){ //lo descarga si no se modificó
                prc.setVisible(true);
                video = new File(Global.directorioTemporal + "/video.mov");
                try {
                    System.out.println("video: " + sep[2]);
                    FileUpload.download(sep[2], video);
                } catch (MalformedURLException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
                Global.fvid = video;   
            }
            
            //reproducir contenido
            if ( Global.fvid != null ){
                prbQT frame = new prbQT(LabVideo2.getText()); 
                frame.pack(); 
                frame.setVisible(true); 
                try { 
                    frame.movie.start(); 
                }  catch (Exception e) { 
                    e.printStackTrace(); 
                } 
            }else{
                JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no está disponible.");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "La Obra no contiene Video.");
        }
    }//GEN-LAST:event_BotVerVideoActionPerformed

    private void BotModVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModVideoActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("MOV","mov");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicación del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(null);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE VIDEO">
            video = exam.getSelectedFile();
            String extension = video.getName().substring( video.getName().lastIndexOf(".") );

            if(extension.equals(".MOV") || extension.equals(".mov")){
                if(video.getName().length() >= 100){
                    LabVideo2.setBackground(Color.pink);
                    LabVideo2.setToolTipText("Nombre de archivo demasiado largo (máx. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "Nombre de archivo demasiado largo (máx. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean ñ = true;
                    String[] aC;
                    String Nombres = video.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("ñ".equals (aC[i]) || "Ñ".equals(aC[i]) || "á".equals(aC[i])|| "Á".equals(aC[i])|| "é".equals(aC[i])|| "É".equals(aC[i])|| "í".equals(aC[i])|| "Í".equals(aC[i])|| "ó".equals(aC[i])|| "Ó".equals(aC[i])|| "ú".equals(aC[i])|| "Ú".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra ñ, tildes o espacios, por favor verifíque.");
                            ñ = false;
                            i = f;
                            video = null;
                            LabVideo2.setText("");
                          
                        }
                    }
                    if(ñ==true){
                    if(Global.video == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituirá el Video previamente seleccionado.\n¿Continuar?") == JOptionPane.NO_OPTION){
                            return;
                        }
                    }else{
                        Global.video = true;
                    }
                    Global.fvid = video;
                    LabVideo2.setText(Global.fvid.getName());                    

                    //reproducir el contenido seleccionado
                    if ( Global.fvid != null ){
                        prbQT frame = new prbQT(Global.fvid.getName()); 
                        frame.pack(); 
                        frame.setVisible(true); 
                        try { 
                           frame.movie.start(); 
                        } catch (Exception e) { 
                            e.printStackTrace(); 
                        }  
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no está disponible.");
                    }
                }
            }}else{
                JOptionPane.showMessageDialog(null, "Sólo se admiten archivos de formato MOV.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                //Global.video = false;
                video = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotModVideoActionPerformed

    private void BotVerAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotVerAudioActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(LabAudio2.getText())){
                                
            if(!Global.audio){  //lo descarga si no se modificó         
                prc.setVisible(true);
                audio = new File(Global.directorioTemporal + "/audio.mp3");
                try {
                    FileUpload.download(sep[1], audio);
                } catch (MalformedURLException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
                Global.filea = audio;
            
             }
            if(Global.filea != null){ //si existe, lo reproduce
                URL mediaURL = null;
                try{
                    mediaURL = audio.toURL();
                }catch ( MalformedURLException malformedURLException ){
                    System.err.println( "No se pudo crear la URL" );
                }

                //reproducir contenido
                MediaPanelAudio mediaPanel = null;
                if ( mediaURL != null ){
                    mediaPanel = new MediaPanelAudio( mediaURL );
                }else{
                    JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no está disponible.");
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no está disponible.");            
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "La Obra no contiene Audio.");
        }
    }//GEN-LAST:event_BotVerAudioActionPerformed

    private void BotModAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModAudioActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("MP3","mp3");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicación del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(null);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE AUDIO">
            audio = exam.getSelectedFile();
            String extension = audio.getName().substring( audio.getName().lastIndexOf(".") );

            if(extension.equals(".MP3") || extension.equals(".mp3")){
                if(audio.getName().length() >= 100){
                    LabAudio2.setBackground(Color.pink);
                    LabAudio2.setToolTipText("Nombre de archivo demasiado largo (máx. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "Nombre de archivo demasiado largo (máx. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean ñ = true;
                    String[] aC;
                    String Nombres = audio.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("ñ".equals (aC[i]) || "Ñ".equals(aC[i]) || "á".equals(aC[i])|| "Á".equals(aC[i])|| "é".equals(aC[i])|| "É".equals(aC[i])|| "í".equals(aC[i])|| "Í".equals(aC[i])|| "ó".equals(aC[i])|| "Ó".equals(aC[i])|| "ú".equals(aC[i])|| "Ú".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra ñ, tildes o espacios, por favor verifíque.");
                            ñ = false;
                            i = f;
                            audio = null;
                            LabAudio2.setText("");
                          
                        }
                    }
                    if(ñ==true){
                    if(Global.audio == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituirá el Video previamente seleccionado.\n¿Continuar?") == JOptionPane.NO_OPTION){
                            return;
                        }
                    }else{
                        Global.audio = true;
                    }
                    Global.filea = audio;
                    LabAudio2.setText(Global.filea.getName());
                    
                    URL mediaURL = null;
                    try{
                        mediaURL = audio.toURL();
                    }catch ( MalformedURLException malformedURLException ){
                        System.err.println( "No se pudo crear la URL." );
                    }

                    //reproducir el contenido seleccionado
                    MediaPanelAudio mediaPanel = null;
                    if ( mediaURL != null ){
                        mediaPanel = new MediaPanelAudio( mediaURL );
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no está disponible.");
                    }
                }
            }}else{
                JOptionPane.showMessageDialog(null, "Sólo se admiten archivos de formato MP3.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                //Global.audio = false;
                audio = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotModAudioActionPerformed

    private void BotVerModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotVerModeloActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(LabModelo2.getText())){
           
            if(!Global.modelo3D){ //lo descarga si no se modificó
                prc.setVisible(true);
                modelo = new File(Global.directorioTemporal + "/modelo.ply");
                System.out.println("modelo: "+ sep[4]);
                try {
                    
                    FileUpload.download(sep[4], modelo);
                } catch (MalformedURLException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
            }

            vtkRenderer render = new vtkRenderer();
            vtkRenderWindow renderWindow = new vtkRenderWindow();
            renderWindow.AddRenderer(render);
            vtkRenderWindowInteractor renderWindowInteractor = new vtkRenderWindowInteractor();
            renderWindowInteractor.SetRenderWindow(renderWindow);
            vtkPLYReader mod = new vtkPLYReader();
            mod.SetFileName(modelo.getAbsolutePath());
            mod.Update();
            vtkElevationFilter colorIt = new vtkElevationFilter();
            colorIt.SetInput(mod.GetOutput());
            colorIt.SetLowPoint(0, 0, -1);
            colorIt.SetHighPoint(0, 0, 1);
            vtkPolyDataMapper point = new vtkPolyDataMapper();
            point.SetInputConnection(mod.GetOutputPort());
            vtkActor actor = new vtkActor();
            actor.SetMapper(point);
            render.AddActor(actor);
            render.SetBackground(1, 1, 1);
            renderWindow.SetSize(500, 500);
            renderWindow.SetPosition(450, 200);
            renderWindow.Render();
            renderWindowInteractor.Start();
            render.Delete();
            renderWindow.Delete();
            renderWindowInteractor.Delete();
            mod.Delete();
            colorIt.Delete();
            actor.Delete();
        }else{
            JOptionPane.showMessageDialog(rootPane, "La Obra no contiene Modelo 3D.");
        }
    }//GEN-LAST:event_BotVerModeloActionPerformed

    private void BotModModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModModeloActionPerformed
        // TODO add your handling code here:
       // MediaPanel mediaPanel = null;
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("PLY","ply");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicación del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(null);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE MODELO 3D">
            modelo = exam.getSelectedFile();
            String extension = modelo.getName().substring( modelo.getName().lastIndexOf(".") );

            if(extension.equals(".PLY") || extension.equals(".ply")){
                if(modelo.getName().length() >= 100){
                   LabModelo2.setBackground(Color.pink);
                    LabModelo2.setToolTipText("Nombre de archivo demasiado largo (máx. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (máx. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean ñ = true;
                    String[] aC;
                    String Nombres = modelo.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("ñ".equals (aC[i]) || "Ñ".equals(aC[i]) || "á".equals(aC[i])|| "Á".equals(aC[i])|| "é".equals(aC[i])|| "É".equals(aC[i])|| "í".equals(aC[i])|| "Í".equals(aC[i])|| "ó".equals(aC[i])|| "Ó".equals(aC[i])|| "ú".equals(aC[i])|| "Ú".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra ñ, tildes o espacios, por favor verifíque.");
                            ñ = false;
                            i = f;
                            modelo = null;
                            LabModelo2.setText("");
                          
                        }
                    }
                    if(ñ==true){
                    URL mediaURL = null;

                    if(Global.modelo3D == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Ya hay un Modelo 3D previamente cargado.\n¿Deseas sustituirlo?") == JOptionPane.NO_OPTION){
                            return;
                     }        
                    }else{
                        Global.modelo3D = true;   
                    }
                    Global.filem = modelo;
                    LabModelo2.setText(Global.filem.getName());

                    //reproducir el contenido seleccionado
                    vtkRenderer render = new vtkRenderer();
                    vtkRenderWindow renderWindow = new vtkRenderWindow();
                    renderWindow.AddRenderer(render);
                    vtkRenderWindowInteractor renderWindowInteractor = new vtkRenderWindowInteractor();
                    renderWindowInteractor.SetRenderWindow(renderWindow);
                    vtkPLYReader mod = new vtkPLYReader();
                    mod.SetFileName(modelo.getAbsolutePath());
                    mod.Update();
                    vtkElevationFilter colorIt = new vtkElevationFilter();
                    colorIt.SetInput(mod.GetOutput());
                    colorIt.SetLowPoint(0, 0, -1);
                    colorIt.SetHighPoint(0, 0, 1);
                    vtkPolyDataMapper point = new vtkPolyDataMapper();
                    point.SetInputConnection(mod.GetOutputPort());
                    vtkActor actor = new vtkActor();
                    actor.SetMapper(point);
                    render.AddActor(actor);
                    render.SetBackground(1, 1, 1);
                    renderWindow.SetSize(500, 500);
                    renderWindow.SetPosition(450, 200);
                    renderWindow.Render();
                    renderWindowInteractor.Start();
                    render.Delete();
                    renderWindow.Delete();
                    renderWindowInteractor.Delete();
                    mod.Delete();
                    colorIt.Delete();
                    actor.Delete();
                }
            }}else{
                JOptionPane.showMessageDialog(null, "Sólo se admiten archivos de formato PLY.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                Global.modelo3D = false;
                modelo = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotModModeloActionPerformed

    private void BotModTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModTextoActionPerformed
        // TODO add your handling code here:
        if(Global.texto == true){ //modificar el texto existente
            Global.txt_texto_ModOb2 = LabTexto2;
            Global.stringTexto = LabTexto2.getText();
            IngresarTexto it = new IngresarTexto();
            it.setVisible(true);
        }else{ //ingresar nuevo texto
            IngresarTexto2 it2 = new IngresarTexto2();
            it2.setVisible(true);
            this.setVisible(false);
        }
        //this.setVisible(false);
    }//GEN-LAST:event_BotModTextoActionPerformed

    private void labImaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labImaMouseClicked
        // TODO add your handling code here:
        String aux = (String) ListaZonas.getSelectedValue();
        System.out.println(aux);
        
        if(!"null".equals(aux) && aux != null){
            Global.zii = new ZonaInteresIma("modificar");
            Global.zii.setVisible(true);
            Global.zii.setLocationRelativeTo(null);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Debes seleccionar una Zona de Interés.");
        }        
    }//GEN-LAST:event_labImaMouseClicked

    private void LabVideo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabVideo2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LabVideo2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(modZi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(modZi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(modZi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(modZi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modZi().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotAceptar;
    private javax.swing.JButton BotCancelar;
    private javax.swing.JButton BotModAudio;
    private javax.swing.JButton BotModModelo;
    private javax.swing.JButton BotModTexto;
    private javax.swing.JButton BotModVideo;
    private javax.swing.JButton BotVerAudio;
    private javax.swing.JButton BotVerModelo;
    private javax.swing.JButton BotVerVideo;
    private javax.swing.JLabel LabAudio1;
    private javax.swing.JTextField LabAudio2;
    private javax.swing.JLabel LabMod3D;
    private javax.swing.JTextField LabModelo2;
    private javax.swing.JLabel LabNomObra;
    private javax.swing.JLabel LabNomObra2;
    private javax.swing.JLabel LabNroZona;
    private javax.swing.JLabel LabNroZona2;
    private javax.swing.JLabel LabText;
    private javax.swing.JTextArea LabTexto2;
    private javax.swing.JLabel LabVideo1;
    private javax.swing.JTextField LabVideo2;
    private javax.swing.JList ListaZonas;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labIma;
    // End of variables declaration//GEN-END:variables
    
    public void CargarLista(){
        String data = getZonaObra(Global.nomObra);
        
        if(data.equals("")){
            prc.dispose();
            JOptionPane.showMessageDialog(rootPane, "Esta Obra no tiene Zonas de Interés.");
            this.BotAceptar.setEnabled(false);
            vacio = true;
        }else{
            String[] sepo = data.split("=>");
            String e;
            for (int i=0;i<sepo.length;i++){
                e = sepo[i];
                modListaZonas.addElement(e);
            }
            prc.dispose();
            vacio = false;
        }
    }

    public void makevisible(Boolean b){
        if(b==true){
            LabAudio2.setEnabled(true);
            LabVideo2.setEnabled(true);
            LabModelo2.setEnabled(true);
            LabTexto2.setEnabled(true);
            BotVerAudio.setEnabled(true);
            BotVerVideo.setEnabled(true);
            BotVerModelo.setEnabled(true);
        }
        else{
            LabAudio2.setEnabled(false);
            LabVideo2.setEnabled(false);
            LabModelo2.setEnabled(false);
            LabTexto2.setEnabled(false);
            BotVerAudio.setEnabled(false);
            BotVerVideo.setEnabled(false);
            BotVerModelo.setEnabled(false);
        }
    }
    
    private void CambiarImagenLabel(BufferedImage read, JLabel label){        
        //mostrar la imagen sin perder la relacion de aspecto
        float height = (float)read.getHeight();
        float width = (float)read.getWidth();
        float maxH = (float) 335;
        float maxV = (float) 250;
        float relacion = 1;
        
        if(height > width){ //imagen vertical
            relacion = height / maxV;
        }else if(width > height){ //imagen horizontal
            relacion =  width / maxH;
        }else{ //imagen cuadrada
            relacion = height / maxV;
        }
        
        Image scaledInstance = read.getScaledInstance((int)(width/relacion), (int)(height/relacion), Image.SCALE_DEFAULT);
        label.setIcon(new ImageIcon(scaledInstance));
    }

    
    private void mostrarContenido(JTextField label, String dat, String txt){
        if(dat.equals("null")){
//            if("video".equals(txt)){
//                Global.video = false;
//                BotVerVideo.setEnabled(false);
//            }else if("audio".equals(txt)){
//                Global.audio = false;
//                BotVerAudio.setEnabled(false);
//            }else if("modelo".equals(txt)){
//                Global.modelo3D = false;
//                BotVerModelo.setEnabled(false);
//            }/*else if("BotVerTexto".equals(bot.getName())){
//                Global.texto = false;
//            }*/
            label.setText("No existe contenido.");
        }else{
//            if("video".equals(txt)){
//                Global.video = true;
//                BotVerVideo.setEnabled(true);
//            }else if("audio".equals(txt)){
//                Global.audio = true;
//                BotVerAudio.setEnabled(true);
//            }else if("modelo".equals(txt)){
//                Global.modelo3D = true;
//                BotVerModelo.setEnabled(true);
//            }/*else if("BotVerTexto".equals(bot.getName())){
//                Global.texto = true;
//            }*/
            label.setText(dat);
        }
    }
    
    /**
     * Refresca la imagen de la Zona de Interés de una Obra, luego de moficarla
     */
    public static void RefrescarImagenZona(){
        File path = null;
        path = new File(Global.directorioTemporal + "/imatmp.jpg");
        try {
            FileUpload.download(Global.nomImagen, path);
        } catch (MalformedURLException ex) {
            Logger.getLogger(elimZi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(elimZi.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedImage read = null;
        try {
            read = ImageIO.read(path);
        } catch (IOException ex) {
            Logger.getLogger(elimZi.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int h, w, x, y;
        h = (int) Global.rrr.getHeight();
        w = (int) Global.rrr.getWidth();
        x = (int) Global.rrr.getX();
        y = (int) Global.rrr.getY();
        
        //cargar las zonas de interes sobre la imagen
        Graphics2D g = (Graphics2D) read.getGraphics();
        g.setColor(new Color(200, 0, 0));
        g.setStroke(new BasicStroke(5f));
        g.drawRect(x, y, w, h);
                
        //mostrar la imagen sin perder la relacion de aspecto
        float height = (float)read.getHeight();
        float width = (float)read.getWidth();
        float maxH = (float) 335;
        float maxV = (float) 250;
        float relacion = 1;
        
        if(height > width){ //imagen vertical
            relacion = height / maxV;
        }else if(width > height){ //imagen horizontal
            relacion =  width / maxH;
        }else{ //imagen cuadrada
            relacion = height / maxV;
        }
        
        Image scaledInstance = read.getScaledInstance((int)(width/relacion), (int)(height/relacion), Image.SCALE_DEFAULT);
        Global.label_imagen.setIcon(new ImageIcon(scaledInstance));
                
        Global.modif_zona = true;
        System.out.println("llego a la funcion");
    }
    
    private static String getZonaObra(java.lang.String nombreObra) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.getZonaObra(nombreObra);
    }

    private static String getContenidoObra(java.lang.String nombre) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.getContenidoObra(nombre);
    }

    private static String getContenidoZona(int idZona) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.getContenidoZona(idZona);
    }

    private static String agregarContenidoZona(int idZona, java.lang.String tipo, java.lang.String nombre) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.agregarContenidoZona(idZona, tipo, nombre);
    }

    private static int modificarZona(int idZona, int largo, int ancho, int x, int y) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.modificarZona(idZona, largo, ancho, x, y);
    }    
    
}
