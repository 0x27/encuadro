/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import proyecto.clases.FileUpload;
import proyecto.clases.Global;
import proyecto.clases.MediaPanelAudio;
import proyecto.clases.Validador;
import proyecto.clases.prbQT;
import vtk.vtkActor;
import vtk.vtkElevationFilter;
import vtk.vtkNativeLibrary;
import vtk.vtkPLYReader;
import vtk.vtkPolyDataMapper;
import vtk.vtkRenderWindow;
import vtk.vtkRenderWindowInteractor;
import vtk.vtkRenderer;

/**
 *
 * @author SysAdmin
 */
public class Modificar_sala extends javax.swing.JFrame {
    ImagenLabel il = null;
    ProcesandoPeticion prc = new ProcesandoPeticion();
    File audio = null, video = null, modelo = null, imagen = null;
    String[] games1;
//    static {
//        if (!vtkNativeLibrary.LoadAllNativeLibraries()) {
//            for (vtkNativeLibrary lib : vtkNativeLibrary.values()) {
//                if (!lib.IsLoaded()) {
//                    System.out.println(lib.GetLibraryName() + " not loaded");
//                }
//            }
//        }
//        vtkNativeLibrary.DisableOutputWindow(null);
//    }

    /**
     * Creates new form Modificar_sala
     */
    public Modificar_sala() {
        Image ico = new ImageIcon(Global.directorioLocal + "\\museo.png").getImage();
        setIconImage(ico);
        initComponents();
        prc.setLocationRelativeTo(null);
        prc.setVisible(true);
        this.setLocationRelativeTo(null);
        
        DeshabilitarAudio();
        DeshabilitarVideo();
        DeshabilitarImagen();
        DeshabilitarModelo();
        DeshabilitarTexto();
        txt_txt.setEnabled(true);
        //chk_au.setEnabled(false);
        //chk_tx.setEnabled(false);
        //chk_mo.setEnabled(false);
        //chk_vi.setEnabled(false);
        //chk_im.setEnabled(false);
        print_btn.setEnabled(false);
        
        File path = new File(Global.directorioLocal + "/qr_default.jpg");
        //imagen por defecto del label Imagen
        CambiarImagenLabel(path, qr_lbl);
        prc.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        id_txt = new javax.swing.JTextField();
        bus_btn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nom_txt = new javax.swing.JTextField();
        au_txt = new javax.swing.JTextField();
        vi_txt = new javax.swing.JTextField();
        im_txt = new javax.swing.JTextField();
        mod_txt = new javax.swing.JTextField();
        btn_ver_au = new javax.swing.JButton();
        btn_cambiar_au = new javax.swing.JButton();
        btn_ver_vi = new javax.swing.JButton();
        btn_cambiar_vi = new javax.swing.JButton();
        btn_ver_im = new javax.swing.JButton();
        btn_cambiar_im = new javax.swing.JButton();
        btn_ver_mo = new javax.swing.JButton();
        btn_cambiar_mo = new javax.swing.JButton();
        btn_modificar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_txt = new javax.swing.JTextArea();
        qr_lbl = new javax.swing.JLabel();
        print_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        des_txt = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modificar Sala");
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(450, 450));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Modificar Sala");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("ID Sala a modificar:");

        id_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        bus_btn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        bus_btn.setText("Buscar");
        bus_btn.setToolTipText("Realizar la búsqueda");
        bus_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bus_btnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Descripción:");

        nom_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        nom_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nom_txtActionPerformed(evt);
            }
        });

        au_txt.setEditable(false);
        au_txt.setBackground(new java.awt.Color(255, 255, 255));
        au_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        vi_txt.setEditable(false);
        vi_txt.setBackground(new java.awt.Color(255, 255, 255));
        vi_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        im_txt.setEditable(false);
        im_txt.setBackground(new java.awt.Color(255, 255, 255));
        im_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        mod_txt.setEditable(false);
        mod_txt.setBackground(new java.awt.Color(255, 255, 255));
        mod_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        btn_ver_au.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_ver_au.setText("Ver");
        btn_ver_au.setToolTipText("Reproducir el audio asociado");
        btn_ver_au.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ver_auActionPerformed(evt);
            }
        });

        btn_cambiar_au.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_cambiar_au.setText("Cambiar");
        btn_cambiar_au.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cambiar_auActionPerformed(evt);
            }
        });

        btn_ver_vi.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_ver_vi.setText("Ver");
        btn_ver_vi.setToolTipText("Visualizar el video asociado");
        btn_ver_vi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ver_viActionPerformed(evt);
            }
        });

        btn_cambiar_vi.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_cambiar_vi.setText("Cambiar");
        btn_cambiar_vi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cambiar_viActionPerformed(evt);
            }
        });

        btn_ver_im.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_ver_im.setText("Ver");
        btn_ver_im.setToolTipText("Visualizar la imagen asociada");
        btn_ver_im.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ver_imActionPerformed(evt);
            }
        });

        btn_cambiar_im.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_cambiar_im.setText("Cambiar");
        btn_cambiar_im.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cambiar_imActionPerformed(evt);
            }
        });

        btn_ver_mo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_ver_mo.setText("Ver");
        btn_ver_mo.setToolTipText("Visualizar el modelo asociado");
        btn_ver_mo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ver_moActionPerformed(evt);
            }
        });

        btn_cambiar_mo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_cambiar_mo.setText("Cambiar");
        btn_cambiar_mo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cambiar_moActionPerformed(evt);
            }
        });

        btn_modificar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_modificar.setText("Guardar");
        btn_modificar.setToolTipText("Guardar los cambios realizados");
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });

        btn_cancelar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.setToolTipText("Descartar los cambios y cerrar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        txt_txt.setColumns(20);
        txt_txt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txt_txt.setLineWrap(true);
        txt_txt.setRows(5);
        txt_txt.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txt_txt);

        qr_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        qr_lbl.setBorder(id_txt.getBorder());
        qr_lbl.setPreferredSize(new java.awt.Dimension(202, 198));

        print_btn.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        print_btn.setText("Imprimir");
        print_btn.setToolTipText("Imprimir el código QR de la Sala");
        print_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_btnActionPerformed(evt);
            }
        });

        des_txt.setColumns(20);
        des_txt.setLineWrap(true);
        des_txt.setRows(5);
        des_txt.setWrapStyleWord(true);
        jScrollPane2.setViewportView(des_txt);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Código QR:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Modelo 3D:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Imagen:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Audio:");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Texto:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Video:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(786, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(mod_txt)
                                                    .addComponent(au_txt, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(im_txt, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(vi_txt, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(btn_ver_au)
                                                            .addComponent(btn_ver_vi)
                                                            .addComponent(btn_ver_im))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(btn_cambiar_au, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(btn_cambiar_vi)
                                                            .addComponent(btn_cambiar_im)))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(btn_ver_mo)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btn_cambiar_mo))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(btn_modificar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btn_cancelar)))
                                        .addGap(48, 48, 48))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane2)
                                            .addComponent(nom_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(bus_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(print_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59))
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qr_lbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bus_btn)
                    .addComponent(jLabel10))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 22, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qr_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(print_btn))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nom_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 116, Short.MAX_VALUE)))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(au_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_ver_au)
                            .addComponent(btn_cambiar_au)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vi_txt)
                            .addComponent(btn_ver_vi)
                            .addComponent(btn_cambiar_vi)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(im_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_ver_im)
                            .addComponent(btn_cambiar_im)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mod_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_ver_mo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_cambiar_mo)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cancelar)
                    .addComponent(btn_modificar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bus_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bus_btnActionPerformed
        // TODO add your handling code here:
        String in =  id_txt.getText();
        
        if(in.length() < 1){
            //ningún ID de Sala
            id_txt.setBackground(Color.pink);
            id_txt.setToolTipText("Debes escribir el Id de Sala");
            JOptionPane.showMessageDialog(rootPane, "Debes escribir el Id de la Sala para realizar la búsqueda.");
        }else{
            //ID no numérico
            if(!Validador.isNumeric(in)){
                id_txt.setBackground(Color.pink);
                id_txt.setToolTipText("Sólo se admiten números");
                JOptionPane.showMessageDialog(rootPane, "Sólo se admiten números.");
            }else{
                //ID: OK
                id_txt.setBackground(Color.white);
                id_txt.setToolTipText(null);
                Global.IdSala = Integer.parseInt(in);
                int ex = existeSala(Global.IdSala);
                if(ex == 0){
                    JOptionPane.showMessageDialog(rootPane, "No existe Sala con el Id " + in + ", verifique los datos y vuelva a intentarlo.");   
                }else{
                    prc.setVisible(true);
                    File imagen = new File (Global.directorioTemporal + "/qr.gif");
                    String dir = Global.IdSala+"/imagen/";
                    
                    try {           
                        FileUpload.download("ftp://salas:12345678@10.0.2.109/"+Global.IdSala+"/imagen/qr.gif", imagen);
                        Global.fileInputStream = new FileInputStream (imagen);
                        ImageIcon img = new ImageIcon (imagen.toURL());
                        img.getImage().flush();
                        int h = img.getIconHeight();
                        int w = img.getIconWidth();
                        qr_lbl.setSize(w, h);
                        qr_lbl.setIcon(img);
                        print_btn.setEnabled(true);
                    } catch (MalformedURLException ex1) {
                        prc.dispose();
                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex1);
                    } catch (IOException ex1) {
                        prc.dispose();
                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex1);
                    }

                    int c = 0;
                    int c1 = 0;
                    String x = null;
                    String x1 = null;
                    String dsalas = getDataSalaId(Global.IdSala);
                    String[] games2 = null;
                    games2 = dsalas.split("=>");

                    for (int q=0; q<games2.length; q++){
                        x1 = games2[q];
                        c1++;
                        if(c1 == 1) {
                                  nom_txt.setText(x1);
                        }else{
                            if (c1 == 2) {
                                des_txt.setText(x1);
                            }
                        }
                    }      

                    String contenidos = getContenidoSala (Global.IdSala);   
                    games1 = null;
                    games1 = contenidos.split("=>");
                    
                    for (int r=0; r<games1.length; r++){
                        x = games1[r];
                        c++;
                        if(c == 1) {
                            if(x.equals("null")){
                                au_txt.setText("No existe contenido.");
                                //chk_au.setSelected(false);
                                DeshabilitarAudio();
                            }else{
                                au_txt.setText(x);
                                //chk_au.setSelected(true);
                                HabilitarAudio();
                            }
                        }else{
                            if (c == 2) {
                                if(x.equals("null")){
                                    vi_txt.setText("No existe contenido.");
                                    //chk_vi.setSelected(false);
                                    DeshabilitarVideo();
                                }else{
                                    vi_txt.setText(x);
                                    //chk_vi.setSelected(true);
                                    HabilitarVideo();
                                }
                            }else{
                                if ( c == 5 ) {
                                    if(x.equals("null")){
                                         im_txt.setText("No existe contenido.");
                                         //chk_im.setSelected(false);
                                         DeshabilitarImagen();
                                     }else{
                                         im_txt.setText(x);
                                         //chk_im.setSelected(true);
                                         HabilitarImagen();
                                         im_txt.setEnabled(true);
                                     }
                                }else{
                                    if ( c == 4 ) {
                                        if(x.equals("null")){
                                             mod_txt.setText("No existe contenido.");
                                             //chk_mo.setSelected(false);
                                             DeshabilitarModelo();
                                         }else{
                                             mod_txt.setText(x);
                                             //chk_mo.setSelected(true);
                                             HabilitarModelo();
                                         }
                                    }else{
                                        if (c == 3) {
                                            if(x.equals("null")){
                                                 txt_txt.setText("No existe contenido.");
                                                 //chk_tx.setSelected(false);
                                                 DeshabilitarTexto();
                                             }else{
                                                 txt_txt.setText(x);
                                                 //chk_tx.setSelected(true);
                                                 HabilitarTexto();
                                             }  
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //chk_au.setEnabled(true);
                    //chk_tx.setEnabled(true);
                    //chk_mo.setEnabled(true);
                    //chk_vi.setEnabled(true);
                    //chk_im.setEnabled(true);                    
                    btn_cambiar_au.setEnabled(true);
                    btn_cambiar_im.setEnabled(true);
                    btn_cambiar_mo.setEnabled(true);
                    btn_cambiar_vi.setEnabled(true);
                    txt_txt.setEnabled(true);
                    Global.texto = true;
                    prc.dispose();
                }
            }
        }
    }//GEN-LAST:event_bus_btnActionPerformed

    private void btn_ver_auActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ver_auActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(au_txt.getText())){            
        
            if(!Global.audio){ //lo descarga si no se modificó
                prc.setVisible(true);                
                audio = new File(Global.directorioTemporal + "/audio.mp3");
                try {
                    FileUpload.download(au_txt.getText(), audio);
                } catch (MalformedURLException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
                Global.filea = audio;
            }
            
            if(Global.filea != null){ //si existe, lo reproduce
                URL mediaURL = null;
                try{
                    mediaURL = audio.toURL();
                }catch ( MalformedURLException malformedURLException ){
                    System.err.println( "No se pudo crear la URL" );
                }

                //reproducir contenido
                MediaPanelAudio mediaPanel = null;
                if ( mediaURL != null ){
                    mediaPanel = new MediaPanelAudio( mediaURL );
                }else{
                    JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no está disponible.");
                }  
            }else{
                JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no está disponible.");            
            }   
        }else{            
            JOptionPane.showMessageDialog(rootPane, "La Sala no contiene Audio.");
        }
    }//GEN-LAST:event_btn_ver_auActionPerformed

    private void btn_cambiar_auActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cambiar_auActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("MP3","mp3");
        fileChooser.setDialogTitle("Ubicación del archivo resultante.");
        fileChooser.setFileFilter(filtro);
        int result = fileChooser.showOpenDialog(rootPane);
        
        if(result == JFileChooser.APPROVE_OPTION){                        
            //<editor-fold defaultstate="collapsed" desc="VALIDACIÓN Y SUBIDA DEL ARCHIVO DE AUDIO">
            audio = fileChooser.getSelectedFile();
            String extension = audio.getName().substring( audio.getName().lastIndexOf(".") );

            if(extension.equals(".MP3") || extension.equals(".mp3")){
                if(audio.getName().length() > 100){
                    au_txt.setBackground(Color.pink);
                    au_txt.setToolTipText("Nombre de archivo demasiado largo (máx. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (máx. 100 caracteres)", "Error de contenido", 2);
                }else{
                    boolean ñ = true;
                    String[] aC;
                    String Nombres = audio.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        System.out.println(aC[i]);
                        if("ñ".equals (aC[i]) || "Ñ".equals(aC[i]) || "á".equals(aC[i])|| "Á".equals(aC[i])|| "é".equals(aC[i])|| "É".equals(aC[i])|| "í".equals(aC[i])|| "Í".equals(aC[i])|| "ó".equals(aC[i])|| "Ó".equals(aC[i])|| "ú".equals(aC[i])|| "Ú".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra ñ,tildes o espacios, por favor verifíque.");
                            ñ = false;
                            i = f;
                        }
                    }
                    if(ñ==true){
                        if(Global.audio == true){
                            if(JOptionPane.showConfirmDialog(rootPane, "Se sustituirá el Video previamente seleccionado.\n¿Continuar?") == JOptionPane.NO_OPTION){
                                return;
                            }        
                        }else{
                            Global.audio = true;
                        }
                        Global.filea = audio;
                        au_txt.setText(Global.filea.getName());
                        HabilitarAudio();
                        URL mediaURL = null;
                        try{
                            mediaURL = audio.toURL();
                        }catch ( MalformedURLException malformedURLException ){
                            System.err.println( "No se pudo crear la URL." );
                        }

                        //reproducir el contenido seleccionado
                        MediaPanelAudio mediaPanel = null;
                        if ( mediaURL != null ){
                          mediaPanel = new MediaPanelAudio( mediaURL );
                        }else{
                            JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no está disponible.");
                        }                
                     }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Sólo se admiten archivos de formato MP3.", "Error de contenido", 2);
                //Global.audio = false;
                audio = null;
            }                                                                                                        
            //</editor-fold>            
        }
    }//GEN-LAST:event_btn_cambiar_auActionPerformed

    private void btn_ver_viActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ver_viActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(vi_txt.getText())){
        
            if(!Global.video){ //lo descarga si no se modificó
                prc.setVisible(true);
                video = new File(Global.directorioTemporal + "/video.mov");
                try {
                    FileUpload.download(vi_txt.getText(), video);
                } catch (MalformedURLException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
                Global.fvid = video;
            }
            
            //reproducir contenido
            if ( Global.fvid != null ){
                prbQT frame = new prbQT("Video"); 
                frame.pack(); 
                frame.setVisible(true); 
                try { 
                    frame.movie.start(); 
                } catch (Exception e) { 
                     e.printStackTrace(); 
                } 
            }else{
                JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no está disponible.");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "La Obra no contiene Video.");
        }
    }//GEN-LAST:event_btn_ver_viActionPerformed

    private void btn_ver_imActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ver_imActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(im_txt.getText())){
            
            if(!Global.imagen){ //lo descarga si no se modificó            
                prc.setVisible(true);
                imagen = new File (Global.directorioTemporal + "/imatmp.jpg");
                try {        
                    FileUpload.download(im_txt.getText(), imagen);
                } catch (MalformedURLException ex) {
                    prc.dispose();
                    Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.dispose();
                    Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
                Global.filei = imagen;
            }
                try {
                    ImageIcon img = new ImageIcon (Global.filei.toURL());   
                    int h = img.getIconHeight();
                    int w = img.getIconWidth();
                    Global.lab.setSize(w, h);
                    Global.lab.setIcon(img);
                    il = new ImagenLabel();
                    il.setSize(w, h);
                    il.setVisible(true);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                }
        }else{
            JOptionPane.showMessageDialog(rootPane, "La Sala no contiene Imagen.");
        }
    }//GEN-LAST:event_btn_ver_imActionPerformed

    private void btn_ver_moActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ver_moActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(mod_txt.getText())){
            
            if(!Global.modelo3D){ //lo descarga si no se modificó
                prc.setVisible(true);
                modelo = new File(Global.directorioTemporal + "/modelo.ply");
                try {
                    FileUpload.download(mod_txt.getText(), modelo);
                } catch (MalformedURLException ex) {
                    prc.setVisible(true);
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.setVisible(true);
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
            }
            
            vtkRenderer render = new vtkRenderer();
            vtkRenderWindow renderWindow = new vtkRenderWindow();
            renderWindow.AddRenderer(render);
            vtkRenderWindowInteractor renderWindowInteractor = new vtkRenderWindowInteractor();
            renderWindowInteractor.SetRenderWindow(renderWindow);
            vtkPLYReader mod = new vtkPLYReader();
            mod.SetFileName(modelo.getAbsolutePath());
            mod.Update();
            vtkElevationFilter colorIt = new vtkElevationFilter();
            colorIt.SetInput(mod.GetOutput());
            colorIt.SetLowPoint(0, 0, -1);
            colorIt.SetHighPoint(0, 0, 1);
            vtkPolyDataMapper point = new vtkPolyDataMapper();
            point.SetInputConnection(mod.GetOutputPort());
            vtkActor actor = new vtkActor();
            actor.SetMapper(point);
            render.AddActor(actor);
            render.SetBackground(1, 1, 1);
            renderWindow.SetSize(500, 500);
            renderWindow.SetPosition(450, 200);
            renderWindow.Render();
            renderWindowInteractor.Start();
            render.Delete();
            renderWindow.Delete();
            renderWindowInteractor.Delete();
            mod.Delete();
            colorIt.Delete();
            actor.Delete();
        }else{
            JOptionPane.showMessageDialog(rootPane, "La Obra no contiene Modelo 3D.");
        }
    }//GEN-LAST:event_btn_ver_moActionPerformed

    private void btn_cambiar_viActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cambiar_viActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("MOV","mov");
        fileChooser.setDialogTitle("Ubicación del archivo resultante.");
        fileChooser.setFileFilter(filtro);
        int result = fileChooser.showOpenDialog(rootPane);
        
        if(result == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACIÓN Y SUBIDA DEL ARCHIVO DE VIDEO">
            video = fileChooser.getSelectedFile();
            String extension = video.getName().substring( video.getName().lastIndexOf(".") );

            if(extension.equals(".mov") || extension.equals(".MOV")){
                if(video.getName().length() > 100){
                    vi_txt.setBackground(Color.pink);
                    vi_txt.setToolTipText("Nombre de archivo demasiado largo (máx. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (máx. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean ñ = true;
                    String[] aC;
                    String Nombres = video.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("ñ".equals (aC[i]) || "Ñ".equals(aC[i]) || "á".equals(aC[i])|| "Á".equals(aC[i])|| "é".equals(aC[i])|| "É".equals(aC[i])|| "í".equals(aC[i])|| "Í".equals(aC[i])|| "ó".equals(aC[i])|| "Ó".equals(aC[i])|| "ú".equals(aC[i])|| "Ú".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra ñ, tildes o espacios, por favor verifíque.");
                            ñ = false;
                            i = f;
                        }
                    }
                    if(ñ==true){
                    if(Global.video == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituirá el Video previamente seleccionado.\n¿Continuar?") == JOptionPane.NO_OPTION){
                            return;
                        }
                    }else{
                        Global.video = true;                        
                    }
                    vi_txt.setBackground(Color.white);
                    vi_txt.setToolTipText(null);
                    
                    Global.fvid = video; 
                    vi_txt.setText(Global.fvid.getName());
                    HabilitarVideo();
                    //chk_vi.setSelected(true);
//                    btn_ver_vi.setEnabled(true);
                    
                    //reproducir el contenido seleccionado
                    if ( Global.fvid != null ){
                        prbQT frame = new prbQT(Global.fvid.getName()); 
                        frame.pack(); 
                        frame.setVisible(true); 
                        
                        try { 
                            frame.movie.start(); 
                        } catch (Exception e) { 
                            e.printStackTrace(); 
                        } 
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no está disponible.");
                    }
                }
            }}else{
                JOptionPane.showMessageDialog(null, "Sólo se admiten archivos de formato MOV.", "Error de contenido", 2);
                //Global.video = false;
                video = null;
            }
            //</editor-fold>
        }         
    }//GEN-LAST:event_btn_cambiar_viActionPerformed

    private void btn_cambiar_imActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cambiar_imActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("JPEG", "jpeg", "JPG", "jpg");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicación del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE IMAGEN">
            imagen = exam.getSelectedFile();
            String extension = imagen.getName().substring( imagen.getName().lastIndexOf(".") );

            if(extension.equals(".jpg") || extension.equals(".JPG") || extension.equals(".jpeg") || extension.equals(".JPEG")){
                if(imagen.getName().length() >= 100){
                    im_txt.setBackground(Color.pink);
                    im_txt.setToolTipText("Nombre de archivo demasiado largo (máx. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (máx. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean ñ = true;
                    String[] aC;
                    String Nombres = imagen.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("ñ".equals (aC[i]) || "Ñ".equals(aC[i]) || "á".equals(aC[i])|| "Á".equals(aC[i])|| "é".equals(aC[i])|| "É".equals(aC[i])|| "í".equals(aC[i])|| "Í".equals(aC[i])|| "ó".equals(aC[i])|| "Ó".equals(aC[i])|| "ú".equals(aC[i])|| "Ú".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra ñ, tildes o espacios, por favor verifíque.");
                            ñ = false;
                            i = f;
                        }
                    }
                    if(ñ==true){
                    if(Global.imagen == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituirá la Imagen previamente seleccionada.\n¿Continuar?") == JOptionPane.NO_OPTION){
                            return;
                        }
                    }else{
                        Global.imagen = true;                        
                    }
                    Global.filei = imagen;
                    im_txt.setText(Global.filei.getName());
                    HabilitarImagen();
                    //chk_im.setSelected(true);
//                    btn_ver_im.setEnabled(true);
                    
                    //reproducir el contenido seleccionado
                    if(Global.filei != null){
                        try {
                            ImageIcon img = new ImageIcon (Global.filei.toURL());   
                            int h = img.getIconHeight();
                            int w = img.getIconWidth();
                            Global.lab.setSize(w, h);
                            Global.lab.setIcon(img);
                            il = new ImagenLabel();
                            il.setSize(w, h);
                            il.setVisible(true);
                        } catch (MalformedURLException ex) {
                            Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no está disponible.");
                    }
                }
            }}else{
                JOptionPane.showMessageDialog(null, "Sólo se admiten archivos de formato JPEG.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                //Global.video = false;
                imagen = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_btn_cambiar_imActionPerformed

    private void btn_cambiar_moActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cambiar_moActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("PLY","ply");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicación del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE MODELO 3D">
            modelo = exam.getSelectedFile();
            String extension = modelo.getName().substring( modelo.getName().lastIndexOf(".") );

            if(extension.equals(".PLY") || extension.equals(".ply")){
                if(modelo.getName().length() >= 100){
                    mod_txt.setBackground(Color.pink);
                    mod_txt.setToolTipText("Nombre de archivo demasiado largo (máx. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (máx. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean ñ = true;
                    String[] aC;
                    String Nombres = modelo.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("ñ".equals (aC[i]) || "Ñ".equals(aC[i]) || "á".equals(aC[i])|| "Á".equals(aC[i])|| "é".equals(aC[i])|| "É".equals(aC[i])|| "í".equals(aC[i])|| "Í".equals(aC[i])|| "ó".equals(aC[i])|| "Ó".equals(aC[i])|| "ú".equals(aC[i])|| "Ú".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra ñ, tildes o espacios, por favor verifíque.");
                            ñ = false;
                            i = f;
                        }
                    }
                    if(ñ==true){
                    if(Global.modelo3D == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituirá el Video previamente seleccionado.\n¿Continuar?") == JOptionPane.NO_OPTION){
                            return;
                        }        
                    }else{
                        Global.modelo3D = true;   
                    }
                    Global.filem = modelo;
                    mod_txt.setText(Global.filem.getName());
                    HabilitarModelo();
                    //chk_mo.setSelected(true);
//                    btn_ver_mo.setEnabled(true);
                    
                    //reproducir el contenido seleccionado
                    vtkRenderer render = new vtkRenderer();
                    vtkRenderWindow renderWindow = new vtkRenderWindow();
                    renderWindow.AddRenderer(render);
                    vtkRenderWindowInteractor renderWindowInteractor = new vtkRenderWindowInteractor();
                    renderWindowInteractor.SetRenderWindow(renderWindow);
                    vtkPLYReader mod = new vtkPLYReader();
                    mod.SetFileName(modelo.getAbsolutePath());
                    mod.Update();
                    vtkElevationFilter colorIt = new vtkElevationFilter();
                    colorIt.SetInput(mod.GetOutput());
                    colorIt.SetLowPoint(0, 0, -1);
                    colorIt.SetHighPoint(0, 0, 1);
                    vtkPolyDataMapper point = new vtkPolyDataMapper();
                    point.SetInputConnection(mod.GetOutputPort());
                    vtkActor actor = new vtkActor();
                    actor.SetMapper(point);
                    render.AddActor(actor);
                    render.SetBackground(1, 1, 1); 
                    renderWindow.SetSize(500, 500);
                    renderWindow.SetPosition(450, 200);
                    renderWindow.Render();
                    renderWindowInteractor.Start();
                    render.Delete();
                    renderWindow.Delete();
                    renderWindowInteractor.Delete();
                    mod.Delete();
                    colorIt.Delete();
                    actor.Delete();
                }
            }}else{
                JOptionPane.showMessageDialog(null, "Sólo se admiten archivos de formato PLY.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                Global.modelo3D = false;
                modelo = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_btn_cambiar_moActionPerformed

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        // TODO add your handling code here:
        int anduvo = 0;
        int anduvo_2 = 0;
        int anduvo_3 = 0;
        int anduvo_4 = 0;
        int anduvo_5 = 0;
        int anduvo_6 = 0;
        String dev = null;
        boolean errorValidacion = false;

        if("No existe contenido.".equals(au_txt.getText()) && "No existe contenido.".equals(vi_txt.getText()) && "No existe contenido.".equals(mod_txt.getText()) && "No existe contenido.".equals(txt_txt.getText()) && "No existe contenido.".equals(im_txt.getText())) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar al menos un tipo de contenido.", "Error en el formulario", JOptionPane.WARNING_MESSAGE);
        }else{
            if(id_txt.getText().length() < 1){ //no hay ningún ID
                errorValidacion = true;
                id_txt.setBackground(Color.pink);
                id_txt.setToolTipText("Debes escribir el Id de Sala");
            }else{
                if(!Validador.isNumeric(id_txt.getText())){ //id no numérico
                    errorValidacion = true;
                    id_txt.setBackground(Color.pink);
                    id_txt.setToolTipText("Sólo se admiten números");
                }else{
                    id_txt.setBackground(Color.white);
                    id_txt.setToolTipText(null);

                    if(nom_txt.getText().length() < 1){ //ningún nombre
                        errorValidacion = true;
                        nom_txt.setBackground(Color.pink);
                        nom_txt.setToolTipText("Debes escribir un Nombre");
                    }else if(nom_txt.getText().length() > 300){ //nombre muy largo
                        errorValidacion = true;
                        nom_txt.setBackground(Color.pink);
                        nom_txt.setToolTipText("Nombre demasiado largo (máx. 300 caracteres)");
                    }else{
                        nom_txt.setBackground(Color.white);
                        nom_txt.setToolTipText(null);

                        if(des_txt.getText().length() < 1){ //ninguna descripción
                            errorValidacion = true;
                            des_txt.setBackground(Color.pink);
                            des_txt.setToolTipText("Debes escribir una Descripción");
                        }else if(des_txt.getText().length() > 4000){ //descripción muy larga
                            errorValidacion = true;
                            des_txt.setBackground(Color.pink);
                            des_txt.setToolTipText("Descripción demasiado larga (máx. 4000 caracteres)");
                        }else{
                            errorValidacion = false;
                            des_txt.setBackground(Color.white);
                            des_txt.setToolTipText(null);
                            
                            if(txt_txt.getText().length() < 1){ //ningún texto
                                errorValidacion = true;
                                txt_txt.setBackground(Color.pink);
                                txt_txt.setToolTipText("Debes escribir un texto.");
                            }else if(txt_txt.getText().length() > 4000){ //texto muy largo
                                errorValidacion = true;
                                txt_txt.setBackground(Color.pink);
                                txt_txt.setToolTipText("Texto demasiado largo (máx. 4000 caracteres)");
                            }else{
                                errorValidacion = false;
                                txt_txt.setBackground(Color.white);
                                txt_txt.setToolTipText(null);
                                
                                prc.setVisible(true);                                
                                anduvo = modificarSala(Global.IdSala, nom_txt.getText(), des_txt.getText() );
                                dev = agregarContenidoSala(Global.IdSala, "texto", txt_txt.getText());                      
                                dev = null;
                                //subir video
                                if(Global.video == true){
                                    try {
                                        dev = agregarContenidoSala(Global.IdSala,"video",Global.fvid.getName());
                                        if(dev.equals("-2") || dev.equals("-1")){
                                            JOptionPane.showMessageDialog(rootPane, "Ocurrió un error al agregar el video.\nPor favor inténtalo de nuevo.");    
                                            return;
                                        }
                                        else{
                                            FileUpload.upload(dev, Global.fvid);
                                        }
                                    } catch (MalformedURLException ex) {
                                        prc.dispose();
                                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        prc.dispose();
                                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    dev = null;
                                }

                                //subir imagen
                                if(Global.imagen == true){
                                    try {
                                        dev = agregarContenidoSala(Global.IdSala,"imagen",Global.filei.getName());
                                        if(dev.equals("-2") || dev.equals("-1")){
                                            JOptionPane.showMessageDialog(rootPane, "Ocurrió un error al agregar la imagen.\nPor favor inténtalo de nuevo.");    
                                            return;
                                        }
                                        else{
                                            FileUpload.upload(dev, Global.filei);
                                        }
                                    } catch (MalformedURLException ex) {
                                        prc.dispose();
                                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        prc.dispose();
                                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                                //subir modelo
                                if(Global.modelo3D == true){
                                    try {
                                        dev = agregarContenidoSala(Global.IdSala,"modelo",Global.filem.getName());
                                        if(dev.equals("-2") || dev.equals("-1")){
                                            JOptionPane.showMessageDialog(rootPane, "Ocurrió un error al agregar el modelo 3D.\nPor favor inténtalo de nuevo.");    
                                            return;
                                        }
                                        else{
                                            FileUpload.upload(dev, Global.filem);
                                        }
                                    } catch (MalformedURLException ex) {
                                        prc.dispose();
                                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        prc.dispose();
                                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                                //subir audio
                                if(Global.audio == true){
                                    try {
                                        dev = agregarContenidoSala(Global.IdSala,"audio",Global.filea.getName());
                                        if(dev.equals("-2") || dev.equals("-1")){
                                            JOptionPane.showMessageDialog(rootPane, "Ocurrió un error al agregar el audio.\nPor favor inténtalo de nuevo.");    
                                            return;
                                        }
                                        else{
                                            FileUpload.upload(dev, Global.filea);
                                        }
                                    } catch (MalformedURLException ex) {
                                        prc.dispose();
                                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        prc.dispose();
                                        Logger.getLogger(Modificar_sala.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }                            

                                prc.dispose();

                                if(anduvo == 0 && anduvo_2 == 0 && anduvo_3 == 0 && anduvo_4 == 0 && anduvo_5 == 0 && anduvo_6 == 0){
                                    Global.video = false;
                                    Global.audio = false;
                                    Global.texto = false;
                                    Global.modelo3D = false;
                                    Global.stringTexto = null;

                                    if(JOptionPane.showConfirmDialog(rootPane, "La Sala fue modificada correctamente.\n¿Deseas modificar otra?") == JOptionPane.YES_OPTION){
                                        Modificar_sala modSal = new Modificar_sala();
                                        this.dispose();
                                        modSal.setVisible(true);
                                    }else{
                                        this.dispose();
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(rootPane, "No se han podido guardar los cambios en la Sala.\nPor favor inténtalo de nuevo.");
                                }
                            }
                        }
                    }
                }
            }
            
            if(errorValidacion == true){
                JOptionPane.showMessageDialog(rootPane, "Existen errores en los datos ingresados.\nPor favor corrígelos para continuar.", "Error en el formulario", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void print_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_btnActionPerformed
        // TODO add your handling code here:
        if(id_txt.getText().length() < 1){
            id_txt.setBackground(Color.pink);
            id_txt.setToolTipText("Debes escribir el Id de Sala");
            JOptionPane.showMessageDialog(rootPane, "Debes escribir el Id de la Sala para obtener los datos.");
        }else{
            if(JOptionPane.showConfirmDialog(rootPane, "¿Imprimir el Código QR de la Sala?\nSe entxará 1 copia a la impresora.") == JOptionPane.YES_OPTION){
                if( Global.fileInputStream != null ){
                    try {
                        //atributos de la impresora
                        PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();
                        pras.add(new Copies(1));                       
                        //Impresora configurada del sistema
                        PrintService ps = PrintServiceLookup.lookupDefaultPrintService();

                        DocPrintJob docPrintJob = ps.createPrintJob();
                        Doc doc = new SimpleDoc(Global.fileInputStream, DocFlavor.INPUT_STREAM.GIF, null);
                        docPrintJob.print(doc, pras);
                        Global.fileInputStream.close();
                    } catch (PrintException ex) {
                        System.out.println(ex);
                    } catch (IOException ex) {
                        System.out.println(ex);
                    }  finally {
                        try {
                            Global.fileInputStream.close();
                        } catch (IOException ex) {
                            System.out.println(ex);
                        }
                    }  
                }
            }
        }
    }//GEN-LAST:event_print_btnActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(print_btn, "Se perderá cualquier cambio no guardado.\n¿Cerrar ventana de modificación?") == JOptionPane.YES_OPTION){
            this.dispose();
        }/*else{
            //limpiar el formulario para una nueva búsqueda
            id_txt.setText(null);
            id_txt.setBackground(Color.white);
            id_txt.setToolTipText(null);
            des_txt.setText(null);
            des_txt.setBackground(Color.white);
            des_txt.setToolTipText(null);
            qr_lbl.setIcon(null);
            nom_txt.setText(null);
            DeshabilitarAudio();
            au_txt.setText(null);
            DeshabilitarVideo();
            tx_txt.setText(null);
            DeshabilitarImagen();
            im_txt.setText(null);
            DeshabilitarModelo();
            mod_txt.setText(null);
            DeshabilitarTexto();            
            txt_txt.setText(null);
        }*/
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void nom_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nom_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nom_txtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Modificar_sala.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Modificar_sala.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Modificar_sala.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Modificar_sala.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Modificar_sala().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField au_txt;
    private javax.swing.JButton btn_cambiar_au;
    private javax.swing.JButton btn_cambiar_im;
    private javax.swing.JButton btn_cambiar_mo;
    private javax.swing.JButton btn_cambiar_vi;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JButton btn_ver_au;
    private javax.swing.JButton btn_ver_im;
    private javax.swing.JButton btn_ver_mo;
    private javax.swing.JButton btn_ver_vi;
    private javax.swing.JButton bus_btn;
    private javax.swing.JTextArea des_txt;
    private javax.swing.JTextField id_txt;
    private javax.swing.JTextField im_txt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField mod_txt;
    private javax.swing.JTextField nom_txt;
    private javax.swing.JButton print_btn;
    private javax.swing.JLabel qr_lbl;
    private javax.swing.JTextArea txt_txt;
    private javax.swing.JTextField vi_txt;
    // End of variables declaration//GEN-END:variables

    private static String getNombreSalas() {
        _109._2._0._10.server_php.Comision sertxce = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = sertxce.getComisionPort();
        return port.getNombreSalas();
    }

    private static int existeSala(int id) {
        _109._2._0._10.server_php.Comision sertxce = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = sertxce.getComisionPort();
        return port.existeSala(id);
    }

    private static String getContenidoSala(int id) {
        _109._2._0._10.server_php.Comision sertxce = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = sertxce.getComisionPort();
        return port.getContenidoSala(id);
    }

    private static String getDataSalaId(int idSala) {
        _109._2._0._10.server_php.Comision sertxce = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = sertxce.getComisionPort();
        return port.getDataSalaId(idSala);
    }

    private static String agregarContenidoSala(int idSala, java.lang.String tipo, java.lang.String nombre) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.agregarContenidoSala(idSala, tipo, nombre);
    }

    private static int modificarSala(int idSala, java.lang.String nombreSala, java.lang.String descripcionSala) {
        _109._2._0._10.server_php.Comision sertxce = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = sertxce.getComisionPort();
        return port.modificarSala(idSala, nombreSala, descripcionSala);
    }

    /**
     * Habilita el campo de Audio
     */
    void HabilitarAudio(){
        au_txt.setToolTipText(null);
        au_txt.setBackground(Color.white);
        au_txt.setEnabled(true);
        btn_ver_au.setEnabled(true);
//        btn_cambiar_au.setEnabled(true);
    }

    /**
     * Deshabilita el campo de Audio
     */
    void DeshabilitarAudio(){
        au_txt.setToolTipText(null);
        au_txt.setBackground(Color.white);
        au_txt.setEnabled(false);
        btn_ver_au.setEnabled(false);
//        btn_cambiar_au.setEnabled(false);
    }
    
    /**
     * Habilita el campo de Video
     */
    void HabilitarVideo(){
        vi_txt.setToolTipText(null);
        vi_txt.setBackground(Color.white);
        vi_txt.setEnabled(true);
        btn_ver_vi.setEnabled(true);
//        btn_cambiar_vi.setEnabled(true);
    }

    /**
     * Deshabilita el campo de Video
     */
    void DeshabilitarVideo(){
        vi_txt.setToolTipText(null);
        vi_txt.setBackground(Color.white);
        vi_txt.setEnabled(false);
        btn_ver_vi.setEnabled(false);
//        btn_cambiar_vi.setEnabled(false);
    }
    
    /**
     * Habilita el campo de Imagen
     */
    void HabilitarImagen(){
        im_txt.setToolTipText(null);
        im_txt.setBackground(Color.white);
        im_txt.setEnabled(true);
        btn_ver_im.setEnabled(true);
//        btn_cambiar_im.setEnabled(true);
    }

    /**
     * Deshabilita el campo de Imagen
     */
    void DeshabilitarImagen(){
        im_txt.setToolTipText(null);
        im_txt.setBackground(Color.white);
        im_txt.setEnabled(false);
        btn_ver_im.setEnabled(false);
//        btn_cambiar_im.setEnabled(false);
    }

    /**
     * Habilita el campo de Modelo 3D
     */
    void HabilitarModelo(){
        mod_txt.setToolTipText(null);
        mod_txt.setBackground(Color.white);
        mod_txt.setEnabled(true);
        btn_ver_mo.setEnabled(true);
//        btn_cambiar_mo.setEnabled(true);
    }

    /**
     * Deshabilita el campo de Modelo 3D
     */
    void DeshabilitarModelo(){
        mod_txt.setToolTipText(null);
        mod_txt.setBackground(Color.white);
        mod_txt.setEnabled(false);
        btn_ver_mo.setEnabled(false);
//        btn_cambiar_mo.setEnabled(false);
    }

    /**
     * Habilita el campo de Texto
     */
    void HabilitarTexto(){
        txt_txt.setToolTipText(null);
        txt_txt.setBackground(Color.white);
        txt_txt.setEnabled(true);
    }

    /**
     * Deshabilita el campo de Texto
     */
    void DeshabilitarTexto(){
        txt_txt.setToolTipText(null);
        txt_txt.setBackground(Color.white);
        txt_txt.setEnabled(false);
    }

    private void CambiarImagenLabel(File path, JLabel label){
        BufferedImage read = null;
        try {
            read = ImageIO.read(path);
        } catch (IOException ex) {
            Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
        //mostrar la imagen sin perder la relacion de aspecto
        float height = (float)read.getHeight();
        float width = (float)read.getWidth();
        float maxH = (float) 180;
        float maxV = (float) 180;
        float relacion = 1;
        
        if(height > width){ //imagen vertical
            relacion = height / maxV;
        }else if(width > height){ //imagen horizontal
            relacion =  width / maxH;
        }else{ //imagen cuadrada
            relacion = height / maxV;
        }
        
        //Image scaledInstance = read.getScaledInstance(290, 230, Image.SCALE_DEFAULT);
        Image scaledInstance = read.getScaledInstance((int)(width/relacion), (int)(height/relacion), Image.SCALE_DEFAULT);
        //im.getImage().flush();
        label.setIcon(new ImageIcon(scaledInstance));
    }
}
