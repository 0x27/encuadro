/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LucasMiranda
 */
public class ModificarJuego extends javax.swing.JFrame {

    ProcesandoPeticion prc = new ProcesandoPeticion();
    String[] games1 = null;
    String[] games11 = null;
    String juegoS,pistaS;

    /**
     * Creates new form ModificarJuego
     */
    public ModificarJuego() {
        initComponents();
        String data = getJuegos();
        games1 = data.split("=>");
        String x = null;
        int c = 0;
        int d = 0;
        for (int r = 0; r < games1.length; r++) {
            x = games1[r];

            if (x.equals("1")) {
                x = "Si";
            } else if (x.equals("0")) {
                x = "No";
            }

            //System.out.println(data);
            tablaJuegos.setValueAt(x, d, c);
            c++;
            if (c > 4) {
                c = 0;
                d++;
            }
        }
        prc.dispose();

        if (d == 0) {
            //BotContinuar.setEnabled(false);
            if (JOptionPane.showConfirmDialog(rootPane, "Actualmente no existen Juegos en el sistema.\n¿Deseas crear un Juego nuevo?") == JOptionPane.YES_OPTION) {
                Crearjuego1 alSal = new Crearjuego1();
                alSal.setVisible(true);
                this.dispose();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaJuegos = new javax.swing.JTable();
        botonEditarJuego = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPistas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modificar Juego");
        setAlwaysOnTop(true);

        tablaJuegos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Obra Inicial", "Activo", "Cíclico"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaJuegos.setToolTipText("");
        tablaJuegos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaJuegos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaJuegosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaJuegos);
        if (tablaJuegos.getColumnModel().getColumnCount() > 0) {
            tablaJuegos.getColumnModel().getColumn(0).setMinWidth(40);
            tablaJuegos.getColumnModel().getColumn(0).setMaxWidth(40);
            tablaJuegos.getColumnModel().getColumn(3).setMinWidth(65);
            tablaJuegos.getColumnModel().getColumn(3).setMaxWidth(65);
            tablaJuegos.getColumnModel().getColumn(4).setMinWidth(70);
            tablaJuegos.getColumnModel().getColumn(4).setMaxWidth(70);
        }

        botonEditarJuego.setText("Editar Juego");
        botonEditarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarJuegoActionPerformed(evt);
            }
        });

        tablaPistas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id obra", "Obra", "Pista", "Obra Siguiente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPistas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPistasMouseClicked(evt);
            }
        });
        tablaPistas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                tablaPistasComponentHidden(evt);
            }
        });
        jScrollPane2.setViewportView(tablaPistas);

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modificar Pista");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonEditarJuego, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(botonEditarJuego)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton1)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void botonEditarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarJuegoActionPerformed
 int seleccion =  tablaJuegos.getSelectedRow();
        
        if(seleccion == -1 || tablaJuegos.getValueAt(seleccion, 0) == null ) {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar datos para realizar los cambios.");
        }else{ 
        EditarJuego ej = new EditarJuego();
        ej.cargarDatos(games1[tablaJuegos.getSelectedRow() * 5], games1[tablaJuegos.getSelectedRow() * 5 + 1], games1[tablaJuegos.getSelectedRow() * 5 + 4], games1[tablaJuegos.getSelectedRow() * 5 + 3]);
        ej.setAlwaysOnTop(true);
        ej.setVisible(true);
        ej.setLocationRelativeTo(null);
        }

    }//GEN-LAST:event_botonEditarJuegoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tablaJuegosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaJuegosMouseClicked
        System.err.println("id " + games1[tablaJuegos.getSelectedRow() * 5]);
        juegoS=games1[tablaJuegos.getSelectedRow() * 5];
        String data2 = getPistas(Integer.parseInt(games1[tablaJuegos.getSelectedRow() * 5]));
        jLabel1.setText(games1[tablaJuegos.getSelectedRow() * 5]);
        
        
        cleart(tablaPistas);
        System.err.println(data2);
        String[] games2 = data2.split("=>");
        String xx = null;
        int c = 0;
        int d = 0;
        for (int r = 0; r < games2.length; r++) {
            xx = games2[r];

            //System.out.println(data);
            tablaPistas.setValueAt(xx, d, c);
            c++;
            if (c > 3) {
                c = 0;
                d++;
            }
        }
        
        prc.dispose();

    }//GEN-LAST:event_tablaJuegosMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int seleccion =  tablaPistas.getSelectedRow();
        
        if(seleccion == -1 || tablaPistas.getValueAt(seleccion, 0) == null ) {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar datos para realizar los cambios.");
        }else{            
        ModificarPistas mp = new ModificarPistas();
//        mp.cargarDatos(games1[tablaJuegos.getSelectedRow() * 5], games1[tablaJuegos.getSelectedRow() * 5 + 1], games1[tablaJuegos.getSelectedRow() * 5 + 4], games1[tablaJuegos.getSelectedRow() * 5 + 3]);
        mp.lblidpista.setText(pistaS);
        mp.lblidjuego.setText(juegoS);
        
        String dat = busquedaPista(Integer.parseInt(pistaS),Integer.parseInt(juegoS));
        games11 = dat.split("=>");
        
        mp.lblpistaactual.setText(games11[1]);
       // mp.txtpista.setText(games11[1]);
        
        mp.setAlwaysOnTop(true);
        mp.setVisible(true);
        mp.setLocationRelativeTo(null);
        cleart(tablaPistas);
      }  
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tablaPistasComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tablaPistasComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaPistasComponentHidden

    private void tablaPistasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPistasMouseClicked

    DefaultTableModel tm = (DefaultTableModel) tablaPistas.getModel(); 
    String dat=String.valueOf(tm.getValueAt(tablaPistas.getSelectedRow(),0));
     jLabel2.setText(dat);
     pistaS=dat;

// TODO add your handling code here:
    }//GEN-LAST:event_tablaPistasMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificarJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificarJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificarJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificarJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarJuego().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonEditarJuego;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaJuegos;
    private javax.swing.JTable tablaPistas;
    // End of variables declaration//GEN-END:variables

    private static String getJuegos() {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.getJuegos();
    }

    private static int setJuegoBorrado(int idJuego) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.setJuegoBorrado(idJuego);
    }

    private static String getPistas(int idJuego) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.getPistas(idJuego);
    }
public static void cleart(final JTable table) {
   for (int i = 0; i < table.getRowCount(); i++)
      for(int j = 0; j < table.getColumnCount(); j++) {
          table.setValueAt("", i, j);
      }
   }

    private static String busquedaPista(int idObra, int idJuego) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.busquedaPista(idObra, idJuego);
    }
}
