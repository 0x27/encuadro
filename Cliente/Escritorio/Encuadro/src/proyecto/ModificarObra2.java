/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import proyecto.clases.FileUpload;
import proyecto.clases.Global;
import proyecto.clases.MediaPanelAudio;
import proyecto.clases.prbQT;

/**
 *
 * @author SysAdmin
 */
public class ModificarObra2 extends javax.swing.JFrame {
    private DefaultListModel modelListaObras = new DefaultListModel();
    File audio = null, video = null, modelo = null;
    String[] sep;
    File path = null;
    File[] files;    
    File[] files_inv = new File[5];    
    boolean vacio = false;
    ProcesandoPeticion prc = new ProcesandoPeticion();    
    
//    static {
//        if (!vtkNativeLibrary.LoadAllNativeLibraries()) {
//            for (vtkNativeLibrary lib : vtkNativeLibrary.values()) {
//                if (!lib.IsLoaded()) {
//                    System.out.println(lib.GetLibraryName() + " not loaded");
//                }
//            }
//        }
//        vtkNativeLibrary.DisableOutputWindow(null);
//    }
    
    /**
     * Creates new form ModificarObra2
     */
    public ModificarObra2() {       
        Image ico = new ImageIcon(Global.directorioLocal + "\\museo.png").getImage();
        setIconImage(ico);
        initComponents();
        prc.setLocationRelativeTo(null);
        prc.setVisible(true);
        this.setLocationRelativeTo(null);
        ListaObras.setModel(modelListaObras);
        labVisi(false);        
        CargarLista();
        Global.agMod = false;
        Global.video = false;
        Global.audio = false;
        Global.modelo3D = false;
        Global.texto = false;
        Global.animacion = false;
        //imagen por defecto
        CambiarImagenLabel(new File(Global.directorioLocal + "/imagen_default.jpg"), LabImagen);
        prc.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        LabDesc = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        LabVideo2 = new javax.swing.JTextField();
        LabVideo = new javax.swing.JLabel();
        LabAudio = new javax.swing.JLabel();
        BotModVideo = new javax.swing.JButton();
        LabAudio2 = new javax.swing.JTextField();
        BotVerAudio = new javax.swing.JButton();
        BotModAudio = new javax.swing.JButton();
        LabMod3D = new javax.swing.JLabel();
        LabMod3D2 = new javax.swing.JTextField();
        BotVerModelo = new javax.swing.JButton();
        BotModMod3D = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        LabText2 = new javax.swing.JTextArea();
        LabText = new javax.swing.JLabel();
        BotModTex = new javax.swing.JButton();
        BotVerVideo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        laba1 = new javax.swing.JTextField();
        laba2 = new javax.swing.JTextField();
        laba3 = new javax.swing.JTextField();
        laba4 = new javax.swing.JTextField();
        laba5 = new javax.swing.JTextField();
        BotAnimacion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaObras = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        LabImagen = new javax.swing.JLabel();
        TxtNombreObra = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtDescObra = new javax.swing.JTextArea();
        LabNomObra = new javax.swing.JLabel();
        BotCancelar = new javax.swing.JButton();
        BotAtras = new javax.swing.JButton();
        BotAceptar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtAutor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modificar Obra");
        setAlwaysOnTop(true);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("2- Selecciona de la lista la Obra a modificar:");
        jLabel1.setOpaque(true);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Modificar Obra (2 de 2)");

        LabDesc.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabDesc.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabDesc.setText("Descripci√≥n:");
        LabDesc.setOpaque(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Contenidos"));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jPanel1.setMinimumSize(new java.awt.Dimension(0, 0));

        LabVideo2.setEditable(false);
        LabVideo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabVideo2ActionPerformed(evt);
            }
        });

        LabVideo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabVideo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabVideo.setText("Video:");

        LabAudio.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabAudio.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabAudio.setText("Audio:");

        BotModVideo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModVideo.setText("Modificar");
        BotModVideo.setToolTipText("Modificar el Video actual");
        BotModVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModVideoActionPerformed(evt);
            }
        });

        LabAudio2.setEditable(false);
        LabAudio2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabAudio2ActionPerformed(evt);
            }
        });

        BotVerAudio.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotVerAudio.setText("Ver");
        BotVerAudio.setToolTipText("Reproducir el Audio asociado");
        BotVerAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotVerAudioActionPerformed(evt);
            }
        });

        BotModAudio.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModAudio.setText("Modificar");
        BotModAudio.setToolTipText("Modificar el Audio actual");
        BotModAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModAudioActionPerformed(evt);
            }
        });

        LabMod3D.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabMod3D.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabMod3D.setText("Modelo 3D:");

        LabMod3D2.setEditable(false);

        BotVerModelo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotVerModelo.setText("Ver");
        BotVerModelo.setToolTipText("Mostrar el Modelo 3D asociado");
        BotVerModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotVerModeloActionPerformed(evt);
            }
        });

        BotModMod3D.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModMod3D.setText("Modificar");
        BotModMod3D.setToolTipText("Modificar el Modelo 3D actual");
        BotModMod3D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModMod3DActionPerformed(evt);
            }
        });

        LabText2.setEditable(false);
        LabText2.setBackground(new java.awt.Color(240, 240, 240));
        LabText2.setColumns(20);
        LabText2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabText2.setLineWrap(true);
        LabText2.setRows(5);
        LabText2.setWrapStyleWord(true);
        jScrollPane3.setViewportView(LabText2);

        LabText.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabText.setText("Texto:");

        BotModTex.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotModTex.setText("Modificar");
        BotModTex.setToolTipText("Modificar el Texto actual");
        BotModTex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotModTexActionPerformed(evt);
            }
        });

        BotVerVideo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotVerVideo.setText("Ver");
        BotVerVideo.setToolTipText("Reproducir el Video asociado");
        BotVerVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotVerVideoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Animaci√≥n:");

        laba1.setEditable(false);
        laba1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        laba2.setEditable(false);
        laba2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        laba3.setEditable(false);
        laba3.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        laba4.setEditable(false);
        laba4.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        laba5.setEditable(false);
        laba5.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        BotAnimacion.setText("Modificar");
        BotAnimacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAnimacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BotModTex))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(LabText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(LabMod3D, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(LabAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LabVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(laba2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(LabVideo2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotVerVideo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotModVideo))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(LabMod3D2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotVerModelo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BotModMod3D))
                                    .addComponent(laba1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(laba4, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(laba5, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(LabAudio2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(BotVerAudio))
                                            .addComponent(laba3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(BotAnimacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(BotModAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LabVideo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BotModVideo)
                        .addComponent(BotVerVideo))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(LabVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LabAudio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BotVerAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BotModAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(LabAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(laba1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(laba2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(laba3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotAnimacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(laba4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(laba5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabMod3D)
                    .addComponent(LabMod3D2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotVerModelo)
                    .addComponent(BotModMod3D))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotModTex)
                .addContainerGap())
        );

        ListaObras.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        ListaObras.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListaObrasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ListaObras);

        LabImagen.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabImagen.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen"));
        LabImagen.setOpaque(true);
        LabImagen.setPreferredSize(new java.awt.Dimension(256, 234));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addComponent(LabImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TxtNombreObra.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        TxtDescObra.setColumns(20);
        TxtDescObra.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        TxtDescObra.setLineWrap(true);
        TxtDescObra.setRows(5);
        TxtDescObra.setWrapStyleWord(true);
        jScrollPane2.setViewportView(TxtDescObra);

        LabNomObra.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        LabNomObra.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabNomObra.setText("Nombre:");
        LabNomObra.setOpaque(true);

        BotCancelar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotCancelar.setText("Cancelar");
        BotCancelar.setToolTipText("Descartar los cambios y cerrar ventana");
        BotCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotCancelarActionPerformed(evt);
            }
        });

        BotAtras.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotAtras.setText("<< Atr√°s");
        BotAtras.setToolTipText("Volver a la selecci√≥n de Sala");
        BotAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAtrasActionPerformed(evt);
            }
        });

        BotAceptar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        BotAceptar.setText("Guardar");
        BotAceptar.setToolTipText("Guardar los cambios realizados");
        BotAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAceptarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Autor:");

        txtAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAutorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LabDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LabNomObra, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(TxtNombreObra, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                            .addComponent(txtAutor))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(BotAtras)
                        .addGap(229, 229, 229)
                        .addComponent(BotAceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotCancelar))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BotCancelar)
                            .addComponent(BotAceptar)
                            .addComponent(BotAtras)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAutor)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabNomObra, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtNombreObra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(77, 77, 77))
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ListaObrasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListaObrasValueChanged
        // TODO add your handling code here:
        prc.setVisible(true);
        TxtNombreObra.setText(ListaObras.getSelectedValue().toString());
        String cont = getContenidoObra(ListaObras.getSelectedValue().toString());
        System.out.println(cont);
        sep = cont.split("=>");
        TxtDescObra.setText(sep[6]);
        txtAutor.setText(sep[7]);
        Global.stringTexto = sep[3];
        path = new File(Global.directorioTemporal + "/imatmp.jpg");
        try {
            FileUpload.download(sep[5], path);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
        }      
        
        //mostrar la imagen sin perder la relacion de aspecto
        CambiarImagenLabel(path, LabImagen);
        
        mostrarContenido(LabAudio2, sep[1], BotVerAudio);
        mostrarContenido(LabVideo2, sep[2], BotVerVideo);  
        mostrarContenido(LabMod3D2, sep[4], BotVerModelo);
        
        //texto
        if(sep[3].equals("null")){
            LabText2.setText("No existe contenido.");
        }else{
            LabText2.setText(sep[3]);
        }
        
        //animacion
        if(sep[8].equals("null") || sep[9].equals("null") || sep[10].equals("null") || sep[11].equals("null") || sep[12].equals("null") ){
            laba1.setText("No existe contenido.");
            laba2.setText("No existe contenido.");
            laba3.setText("No existe contenido.");
            laba4.setText("No existe contenido.");
            laba5.setText("No existe contenido.");
        }else{
            laba1.setText(sep[8]);
            laba2.setText(sep[9]);
            laba3.setText(sep[10]);
            laba4.setText(sep[11]);
            laba5.setText(sep[12]);
        }
        prc.dispose();
        labVisi(true);    
        
        Global.audio = false;
        Global.video = false;
        Global.modelo3D = false;
        Global.texto = false;
        Global.animacion = false;
    }//GEN-LAST:event_ListaObrasValueChanged

    private void BotVerVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotVerVideoActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(LabVideo2.getText())){
            
            if(!Global.video){ //lo descarga si no se modific√≥
                prc.setVisible(true);
                video = new File(Global.directorioTemporal + "/video.mov");
                try {
                    FileUpload.download(sep[2], video);
                } catch (MalformedURLException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
                Global.fvid = video;
            }
            
            //reproducir contenido
            if ( Global.fvid != null ){
                prbQT frame = new prbQT(LabVideo2.getText()); 
                frame.pack(); 
                frame.setVisible(true); 
                try { 
                    frame.movie.start(); 
                } catch (Exception e) { 
                     e.printStackTrace(); 
                } 
            }else{
                JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no est√° disponible.");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "La Obra no contiene Video.");
        }        
    }//GEN-LAST:event_BotVerVideoActionPerformed

    private void BotVerAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotVerAudioActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(LabAudio2.getText())){
            
            if(!Global.audio){ //lo descarga si no se modific√≥
                prc.setVisible(true);                
                audio = new File(Global.directorioTemporal + "/audio.mp3");
                try {
                    FileUpload.download(sep[1], audio);
                } catch (MalformedURLException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.dispose();
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
                Global.filea = audio;
            }
            
            if(Global.filea != null){ //si existe, lo reproduce
                URL mediaURL = null;
                try{
                    mediaURL = audio.toURL();
                }catch ( MalformedURLException malformedURLException ){
                    System.err.println( "No se pudo crear la URL" );
                }

                //reproducir contenido
                MediaPanelAudio mediaPanel = null;
                if ( mediaURL != null ){
                    mediaPanel = new MediaPanelAudio( mediaURL );
                }else{
                    JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no est√° disponible.");
                }  
            }else{
                JOptionPane.showMessageDialog(rootPane, "El archivo que has seleccionado no est√° disponible.");            
            }
        }else{            
            JOptionPane.showMessageDialog(rootPane, "La Obra no contiene Audio.");
        }
    }//GEN-LAST:event_BotVerAudioActionPerformed

    private void BotVerModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotVerModeloActionPerformed
        // TODO add your handling code here:
        if(!"No existe contenido.".equals(LabMod3D2.getText())){
            
            if(!Global.modelo3D){ //lo descarga si no se modific√≥
                prc.setVisible(true);
                modelo = new File(Global.directorioTemporal + "/modelo.pod");
                try {
                    FileUpload.download(sep[4], modelo);
                } catch (MalformedURLException ex) {
                    prc.setVisible(true);
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    prc.setVisible(true);
                    Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
                }
                prc.dispose();
            }
            
//            vtkRenderer render = new vtkRenderer();
//            vtkRenderWindow renderWindow = new vtkRenderWindow();
//            renderWindow.AddRenderer(render);
//            vtkRenderWindowInteractor renderWindowInteractor = new vtkRenderWindowInteractor();
//            renderWindowInteractor.SetRenderWindow(renderWindow);
//            vtkPLYReader mod = new vtkPLYReader();
//            mod.SetFileName(modelo.getAbsolutePath());
//            mod.Update();
//            vtkElevationFilter colorIt = new vtkElevationFilter();
//            colorIt.SetInput(mod.GetOutput());
//            colorIt.SetLowPoint(0, 0, -1);
//            colorIt.SetHighPoint(0, 0, 1);
//            vtkPolyDataMapper point = new vtkPolyDataMapper();
//            point.SetInputConnection(mod.GetOutputPort());
//            vtkActor actor = new vtkActor();
//            actor.SetMapper(point);
//            render.AddActor(actor);
//            render.SetBackground(1, 1, 1);
//            renderWindow.SetSize(500, 500);
//            renderWindow.SetPosition(450, 200);
//            renderWindow.Render();
//            renderWindowInteractor.Start();
//            render.Delete();
//            renderWindow.Delete();
//            renderWindowInteractor.Delete();
//            mod.Delete();
//            colorIt.Delete();
//            actor.Delete();
        }else{
            JOptionPane.showMessageDialog(rootPane, "La Obra no contiene Modelo 3D.");
        }
    }//GEN-LAST:event_BotVerModeloActionPerformed

    private void BotCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotCancelarActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(rootPane, "Se perder√°n los datos no guardados.\n¬øCerrar formulario?") == JOptionPane.YES_OPTION){
            Global.IdSala = 0;
            this.setVisible(false);
        }
    }//GEN-LAST:event_BotCancelarActionPerformed

    private void BotAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAtrasActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(rootPane, "Se perder√°n todos los cambios sin guardar.\n¬øVolver a la ventana anterior?") == JOptionPane.YES_OPTION){
            Global.IdSala = 0;
            ModificarObra mod = new ModificarObra();
            mod.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_BotAtrasActionPerformed

    private void BotAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAceptarActionPerformed
        // TODO add your handling code here:
        int anduvo = 0;
        boolean errorValidacion = false;
        String dev = null;
        if("No existe contenido.".equals(LabAudio2.getText()) && "No existe contenido.".equals(LabVideo2.getText()) && "No existe contenido.".equals(LabMod3D2.getText()) && "No existe contenido.".equals(LabText2.getText()) && "No existe contenido.".equals(laba5.getText())) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar al menos un tipo de contenido.", "Error en el formulario", JOptionPane.WARNING_MESSAGE);
        }else{
            if(TxtNombreObra.getText().length() < 1) {
                errorValidacion = true;
                //JOptionPane.showMessageDialog(rootPane, "Debes ingresar un nombre para la Obra.", "Error en el formulario", JOptionPane.WARNING_MESSAGE);
                TxtNombreObra.setBackground(Color.pink);
                TxtNombreObra.setToolTipText("El campo es obligatorio");
            }else if(TxtNombreObra.getText().length() > 200){
                errorValidacion = true;
                TxtNombreObra.setBackground(Color.pink);
                TxtNombreObra.setToolTipText("El texto excede el m√°ximo de 200 caracteres");
            }else{
                TxtNombreObra.setBackground(Color.white);
                TxtNombreObra.setToolTipText(null);
                
                if(TxtDescObra.getText().length() < 1) {
                    errorValidacion = true;
                    //JOptionPane.showMessageDialog(rootPane, "Debes ingresar una descripci√≥n para la Obra.", "Error en el formulario", JOptionPane.WARNING_MESSAGE);
                    TxtDescObra.setBackground(Color.pink);
                    TxtDescObra.setToolTipText("El campo es obligatorio");
                }else if(TxtDescObra.getText().length() > 1500){
                    errorValidacion = true;
                    TxtDescObra.setBackground(Color.pink);
                    TxtDescObra.setToolTipText("El texto excede el m√°ximo de 1500 caracteres");
                }else{
                    errorValidacion = false;
                    TxtDescObra.setBackground(Color.white);
                    TxtDescObra.setToolTipText(null);
                    prc.setVisible(true);
                    anduvo = modificarObra(Integer.parseInt(sep[0]), TxtNombreObra.getText(), TxtDescObra.getText(), Global.IdSala, txtAutor.getText());
                    
                    if(Global.audio == true){
                        try {
                            dev = agregarContenidoObra(Integer.parseInt(sep[0]), "audio", audio.getName());
                            if(dev.equals("-2") || dev.equals("-1")){
                                JOptionPane.showMessageDialog(rootPane, "Ocurri√≥ un error al agregar el audio.\nPor favor int√©ntalo de nuevo.");    
                                return;
                            }else{
                                FileUpload.upload(dev, audio);
                            }
                        } catch (MalformedURLException ex) {
                            prc.dispose();
                            Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            prc.dispose();
                            Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                    if(Global.video == true){
                        try {
                            dev = agregarContenidoObra(Integer.parseInt(sep[0]), "video", video.getName());
                            if(dev.equals("-2") || dev.equals("-1")){
                                JOptionPane.showMessageDialog(rootPane, "Ocurri√≥ un error al agregar el video.\nPor favor int√©ntalo de nuevo.");    
                                return;
                            }else{
                                FileUpload.upload(dev, video);
                            }
                        } catch (MalformedURLException ex) {
                            prc.dispose();
                            Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            prc.dispose();
                            Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                    if(Global.texto == true){
                        agregarContenidoObra(Integer.parseInt(sep[0]), "texto", Global.stringTexto);
                    }
                    
                    if(Global.modelo3D == true){
                        try {
                            dev = agregarContenidoObra(Integer.parseInt(sep[0]), "modelo", modelo.getName());
                            if(dev.equals("-2") || dev.equals("-1")){
                                JOptionPane.showMessageDialog(rootPane, "Ocurri√≥ un error al agregar el modelo 3D.\nPor favor int√©ntalo de nuevo.");    
                                return;
                            }
                            else{
                                FileUpload.upload(dev, modelo);
                            }
                        } catch (MalformedURLException ex) {
                            prc.dispose();
                            Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            prc.dispose();
                            Logger.getLogger(ModificarObra2.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                    if(Global.animacion == true){
                        String nombre = "";
                        int c = files.length;                       
                        File f = null;  
                        nombre = laba1.getText() + "=>" + laba2.getText() + "=>" + laba3.getText() + "=>" + laba4.getText() + "=>" + laba5.getText();
                        dev = agregarContenidoObra(Integer.parseInt(sep[0]), "animacion", nombre);
                        String[] an = dev.split("=>");
                        for (int i=0; i<c; i++){
                            f = files[i].getAbsoluteFile();
                            try {
                                    FileUpload.upload(an[i], f);
                                } catch (MalformedURLException ex) {
                                    prc.dispose();
                                    Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (IOException ex) {
                                    prc.dispose();
                                    Logger.getLogger(AgregarObra2.class.getName()).log(Level.SEVERE, null, ex);
                                }
                        }
                        files = null;
                    }
                    
                    prc.dispose();

                    if(anduvo ==0){
                        Global.video = false;
                        Global.audio = false;
                        Global.texto = false;
                        Global.modelo3D = false;
                        Global.stringTexto = null;
                        Global.agMod = null;

                        if(JOptionPane.showConfirmDialog(rootPane, "La Obra fue modificada correctamente.\n¬øDeseas modificar otra?") == JOptionPane.YES_OPTION){
                            ModificarObra modOb = new ModificarObra();
                            this.dispose();
                            modOb.setVisible(true);
                        }else{
                            this.dispose();
                        }                    
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "No se han podido guardar los cambios en la Obra.\nPor favor int√©ntalo de nuevo.");
                    }
                }
            }
            
            if(errorValidacion == true){
                JOptionPane.showMessageDialog(rootPane, "Existen errores en los datos ingresados.\nPor favor corr√≠gelos para continuar.", "Error en el formulario", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_BotAceptarActionPerformed

    private void BotModVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModVideoActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("MOV","mov");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicaci√≥n del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE VIDEO">
            video = exam.getSelectedFile();
            String extension = video.getName().substring( video.getName().lastIndexOf(".") );

            if(extension.equals(".mov") || extension.equals(".MOV")){
                if(video.getName().length() >= 100){
                    LabVideo2.setBackground(Color.pink);
                    LabVideo2.setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean √± = true;
                    String[] aC;
                    String Nombres = video.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        System.out.println(aC[i]);
                        if("√±".equals (aC[i]) || "√ë".equals(aC[i]) || "√°".equals(aC[i])|| "√Å".equals(aC[i])|| "√©".equals(aC[i])|| "√â".equals(aC[i])|| "√≠".equals(aC[i])|| "√ç".equals(aC[i])|| "√≥".equals(aC[i])|| "√ì".equals(aC[i])|| "√∫".equals(aC[i])|| "√ö".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            LabVideo2.setText("No existe contenido.");
                        }
                    }
                    if(√±==true){
                    if(Global.video == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituir√° el Video previamente seleccionado.\n¬øContinuar?") == JOptionPane.NO_OPTION){
                            return;
                        }
                    }else{
                        Global.video = true;                        
                    }
                    Global.fvid = video;
                    LabVideo2.setText(Global.fvid.getName());

                    //reproducir el contenido seleccionado
                    if ( Global.fvid != null ){
                        prbQT frame = new prbQT(Global.fvid.getName()); 
                        frame.pack(); 
                        frame.setVisible(true); 
                        
                        try { 
                            frame.movie.start(); 
                        } catch (Exception e) { 
                            e.printStackTrace(); 
                        } 
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no est√° disponible.");
                    }
                }
            }}else{
                JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato MOV.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                //Global.video = false;
                video = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotModVideoActionPerformed

    private void BotModAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModAudioActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("MP3","mp3");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicaci√≥n del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE AUDIO">
            audio = exam.getSelectedFile();
            String extension = audio.getName().substring( audio.getName().lastIndexOf(".") );

            if(extension.equals(".MP3") || extension.equals(".mp3")){
                if(audio.getName().length() >= 100){
                    LabAudio2.setBackground(Color.pink);
                    LabAudio2.setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean √± = true;
                    String[] aC;
                    String Nombres = audio.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("√±".equals (aC[i]) || "√ë".equals(aC[i]) || "√°".equals(aC[i])|| "√Å".equals(aC[i])|| "√©".equals(aC[i])|| "√â".equals(aC[i])|| "√≠".equals(aC[i])|| "√ç".equals(aC[i])|| "√≥".equals(aC[i])|| "√ì".equals(aC[i])|| "√∫".equals(aC[i])|| "√ö".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            LabAudio2.setText("No existe contenido.");
                        }
                    }
                    if(√±==true){
                    if(Global.audio == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituir√° el Video previamente seleccionado.\n¬øContinuar?") == JOptionPane.NO_OPTION){
                            return;
                        }        
                    }else{
                        Global.audio = true;
                    }
                    Global.filea = audio;
                    LabAudio2.setText(Global.filea.getName());
                    
                    URL mediaURL = null;
                    try{
                        mediaURL = audio.toURL();
                    }catch ( MalformedURLException malformedURLException ){
                        System.err.println( "No se pudo crear la URL." );
                    }

                    //reproducir el contenido seleccionado
                    MediaPanelAudio mediaPanel = null;
                    if ( mediaURL != null ){
                        mediaPanel = new MediaPanelAudio( mediaURL );
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "El archivo seleccionado no est√° disponible.");
                    }
                }
            }}else{
                JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato MP3.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                //Global.audio = false;
                audio = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotModAudioActionPerformed

    private void BotModTexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModTexActionPerformed
        // TODO add your handling code here:
//        if(Global.texto == true){ //modificar el texto existente
            Global.txt_texto_ModOb2 = LabText2;
            if(!"No existe contenido.".equals(LabText2.getText())){
                Global.stringTexto = LabText2.getText();
            }else{
                Global.stringTexto = "";
            }
            IngresarTexto it = new IngresarTexto();
            it.setVisible(true);
//        }else{ //ingresar nuevo texto
//            IngresarTexto2 it2 = new IngresarTexto2();
//            it2.setVisible(true);
//            this.setVisible(false);
//        }
        //this.setVisible(false);
    }//GEN-LAST:event_BotModTexActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        if(Global.texto == true){
            LabText2.setText(Global.stringTexto);
        }
        
        if(vacio == true){  //cierra la ventana y vuelve a la anterior, si la Sala no tiene Obras
            this.dispose();
            ModificarObra modOb = new ModificarObra();
            modOb.setVisible(true);
            Global.IdSala = 0;
        }
    }//GEN-LAST:event_formComponentShown

    private void BotModMod3DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotModMod3DActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("POD","pod");
        JFileChooser exam = new JFileChooser();
        exam.setDialogTitle("Ubicaci√≥n del archivo resultante.");
        exam.setFileFilter(filtro);
        int returnVal = exam.showOpenDialog(rootPane);

        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE MODELO 3D">
            modelo = exam.getSelectedFile();
            String extension = modelo.getName().substring( modelo.getName().lastIndexOf(".") );

            if(extension.equals(".POD") || extension.equals(".pod")){
                if(modelo.getName().length() >= 100){
                    LabMod3D2.setBackground(Color.pink);
                    LabMod3D2.setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
                    JOptionPane.showMessageDialog(rootPane, "El nombre de archivo es demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                }else{
                    boolean √± = true;
                    String[] aC;
                    String Nombres = modelo.getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int i = 0; i<=f; i++){
                        if("√±".equals (aC[i]) || "√ë".equals(aC[i]) || "√°".equals(aC[i])|| "√Å".equals(aC[i])|| "√©".equals(aC[i])|| "√â".equals(aC[i])|| "√≠".equals(aC[i])|| "√ç".equals(aC[i])|| "√≥".equals(aC[i])|| "√ì".equals(aC[i])|| "√∫".equals(aC[i])|| "√ö".equals(aC[i])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            LabMod3D2.setText("No existe contenido.");
                        }
                    }
                    if(√±==true){
                    if(Global.modelo3D == true){
                        if(JOptionPane.showConfirmDialog(rootPane, "Se sustituir√° el Video previamente seleccionado.\n¬øContinuar?") == JOptionPane.NO_OPTION){
                            return;
                        }        
                    }else{
                        Global.modelo3D = true;   
                    }
                    Global.filem = modelo;
                    LabMod3D2.setText(Global.filem.getName());
                    
                    //reproducir el contenido seleccionado
//                    vtkRenderer render = new vtkRenderer();
//                    vtkRenderWindow renderWindow = new vtkRenderWindow();
//                    renderWindow.AddRenderer(render);
//                    vtkRenderWindowInteractor renderWindowInteractor = new vtkRenderWindowInteractor();
//                    renderWindowInteractor.SetRenderWindow(renderWindow);
//                    vtkPLYReader mod = new vtkPLYReader();
//                    mod.SetFileName(modelo.getAbsolutePath());
//                    mod.Update();
//                    vtkElevationFilter colorIt = new vtkElevationFilter();
//                    colorIt.SetInput(mod.GetOutput());
//                    colorIt.SetLowPoint(0, 0, -1);
//                    colorIt.SetHighPoint(0, 0, 1);
//                    vtkPolyDataMapper point = new vtkPolyDataMapper();
//                    point.SetInputConnection(mod.GetOutputPort());
//                    vtkActor actor = new vtkActor();
//                    actor.SetMapper(point);
//                    render.AddActor(actor);
//                    render.SetBackground(1, 1, 1); 
//                    renderWindow.SetSize(500, 500);
//                    renderWindow.SetPosition(450, 200);
//                    renderWindow.Render();
//                    renderWindowInteractor.Start();
//                    render.Delete();
//                    renderWindow.Delete();
//                    renderWindowInteractor.Delete();
//                    mod.Delete();
//                    colorIt.Delete();
//                    actor.Delete();
                }
            }}else{
                JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato POD.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                //Global.modelo3D = false;
                modelo = null;
            }
            //</editor-fold>
        }
    }//GEN-LAST:event_BotModMod3DActionPerformed

    private void BotAnimacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAnimacionActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("POD","pod");
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(filtro);
        chooser.setMultiSelectionEnabled(true);
        int returnVal = chooser.showOpenDialog(rootPane);
         
        if(returnVal == JFileChooser.APPROVE_OPTION){
            //<editor-fold defaultstate="collapsed" desc="VALIDACION DEL ARCHIVO DE MODELO 3D">
            files = chooser.getSelectedFiles();
            File ani = null;
            int c = files.length;
            JTextField[] fields = new JTextField[5];
            fields[0] = laba1;
            fields[1] = laba2;
            fields[2] = laba3;
            fields[3] = laba4;
            fields[4] = laba5;
            
            if(c != 5 ){
                JOptionPane.showMessageDialog(null, "Debe seleccionar cinco modelos para formar la animaci√≥n completa.", "Error de Contenido", 2);
                files = null;
            }else{
                for (int i = 0; i<c; i++){
                    ani = files[i].getAbsoluteFile(); 
                    String extension = ani.getName().substring( ani.getName().lastIndexOf(".") );

                    if(extension.equals(".POD") || extension.equals(".pod")){
                        fields[i].setText(files[i].getName());
                        
                        if(ani.getName().length() >= 100){
                            fields[i].setBackground(Color.pink);
                            fields[i].setToolTipText("Nombre de archivo demasiado largo (m√°x. 100 caracteres)");
                            JOptionPane.showMessageDialog(rootPane, "Nombre de archivo demasiado largo (m√°x. 100 caracteres)", "Error de Contenido", 2);
                        }else{
                            boolean √± = true;
                    String[] aC;
                    String Nombres = files[i].getName(); 
                    int f =  Nombres.length();
                    aC = Nombres.split("");
                    for(int u = 0; u<=f; u++){
                        if("√±".equals (aC[u]) || "√ë".equals(aC[u]) || "√°".equals(aC[u])|| "√Å".equals(aC[u])|| "√©".equals(aC[u])|| "√â".equals(aC[u])|| "√≠".equals(aC[u])|| "√ç".equals(aC[u])|| "√≥".equals(aC[u])|| "√ì".equals(aC[u])|| "√∫".equals(aC[u])|| "√ö".equals(aC[u])|| " ".equals(aC[i])){
                            JOptionPane.showMessageDialog(rootPane, "Los nombres de los contenidos no pueden contener la letra √±, tildes o espacios, por favor verif√≠que.");
                            √± = false;
                            i = f;
                            Global.animacion = false;
                            files = null;
                            laba1.setText("No existe contenido.");
                            laba2.setText("No existe contenido.");
                            laba3.setText("No existe contenido.");
                            laba4.setText("No existe contenido.");
                            laba5.setText("No existe contenido.");
                            c = i;
                            
                        }
                    }
                    if(√±==true){
                            //chk_animacion.setSelected(true);
                            fields[i].setBackground(Color.white);
                            fields[i].setToolTipText(null);
                            Global.animacion = true;                            
                        }   
                    }}else{
                        JOptionPane.showMessageDialog(null, "S√≥lo se admiten archivos de formato POD.\nEl Contenido no ha sido cargado.", "Error de contenido", 2);
                        Global.animacion = false;
                        files = null;
                            laba1.setText("");
                            laba2.setText("");
                            laba3.setText("");
                            laba4.setText("");
                            laba5.setText("");
                            i = c;
                          
                    }
                }         
            }
            //</editor-fold>  
        }        
    }//GEN-LAST:event_BotAnimacionActionPerformed

    private void LabAudio2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabAudio2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LabAudio2ActionPerformed

    private void LabVideo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabVideo2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LabVideo2ActionPerformed

    private void txtAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAutorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAutorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificarObra2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificarObra2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificarObra2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificarObra2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarObra2().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotAceptar;
    private javax.swing.JButton BotAnimacion;
    private javax.swing.JButton BotAtras;
    private javax.swing.JButton BotCancelar;
    private javax.swing.JButton BotModAudio;
    private javax.swing.JButton BotModMod3D;
    private javax.swing.JButton BotModTex;
    private javax.swing.JButton BotModVideo;
    private javax.swing.JButton BotVerAudio;
    private javax.swing.JButton BotVerModelo;
    private javax.swing.JButton BotVerVideo;
    private javax.swing.JLabel LabAudio;
    private javax.swing.JTextField LabAudio2;
    private javax.swing.JLabel LabDesc;
    private javax.swing.JLabel LabImagen;
    private javax.swing.JLabel LabMod3D;
    private javax.swing.JTextField LabMod3D2;
    private javax.swing.JLabel LabNomObra;
    private javax.swing.JLabel LabText;
    private javax.swing.JTextArea LabText2;
    private javax.swing.JLabel LabVideo;
    private javax.swing.JTextField LabVideo2;
    private javax.swing.JList ListaObras;
    private javax.swing.JTextArea TxtDescObra;
    private javax.swing.JTextField TxtNombreObra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField laba1;
    private javax.swing.JTextField laba2;
    private javax.swing.JTextField laba3;
    private javax.swing.JTextField laba4;
    private javax.swing.JTextField laba5;
    private javax.swing.JTextField txtAutor;
    // End of variables declaration//GEN-END:variables

    private static String getContenidoObra(java.lang.String nombre) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.getContenidoObra(nombre);
    }
    private static String getObraSala(int id) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.getObraSala(id);
    }
    private static int modificarObra(int idObra, java.lang.String nombreObra, java.lang.String descripcionObra, int idSala, java.lang.String autorObra) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.modificarObra(idObra, nombreObra, descripcionObra, idSala, autorObra);
    }
    private static String agregarContenidoObra(int idObra, java.lang.String tipo, java.lang.String nombre) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.agregarContenidoObra(idObra, tipo, nombre);
    }
    private void CargarLista(){
        String data = getObraSala(Global.IdSala);
        String[] sep = data.split("=>");
        String e = null;
        //Boolean vacio = false;

        for (int i=0; i<sep.length; i++){
            e = sep[i];
            
            if("".equals(e)){
                modelListaObras.addElement("< Lista vac√≠a >");
                prc.dispose();
                JOptionPane.showMessageDialog(rootPane, "La Sala seleccionada no tiene Obras asociadas", "Sala vac√≠a", JOptionPane.WARNING_MESSAGE);
                vacio = true;                
            }else{
                modelListaObras.addElement(e);
                vacio = false;
            }
        }
        prc.dispose();
    }
    
    private void labVisi(Boolean siono){
        if(siono == true){
            BotVerVideo.setEnabled(true);
            BotVerAudio.setEnabled(true);
            BotVerModelo.setEnabled(true);
            BotAceptar.setEnabled(true);
            BotModVideo.setEnabled(true);
            BotModAudio.setEnabled(true);
            BotModTex.setEnabled(true);
            BotModMod3D.setEnabled(true);
            BotAnimacion.setEnabled(true);
        }else{
            BotVerVideo.setEnabled(false);
            BotVerAudio.setEnabled(false);
            BotVerModelo.setEnabled(false);
            BotAceptar.setEnabled(false);
            BotModVideo.setEnabled(false);
            BotModAudio.setEnabled(false);
            BotModTex.setEnabled(false);
            BotModMod3D.setEnabled(false);
            BotAnimacion.setEnabled(false);            
        }
    }
    
    private void mostrarContenido(JTextField label, String dat, JButton bot){
        if(dat.equals("null")){
//            if("BotModVideo".equals(bot.getName())){
//                Global.video = false;
//            }else if("BotModAudio".equals(bot.getName())){
//                Global.audio = false;
//            }else if("BotModMod3D".equals(bot.getName())){
//                Global.modelo3D = false;
//            }else if("BotModTex".equals(bot.getName())){
//                Global.texto = false;
//            }

            label.setText("No existe contenido.");
            bot.setEnabled(false);
        }else{
//            if("BotModVideo".equals(bot.getName())){
//                Global.video = true;
//            }else if("BotModAudio".equals(bot.getName())){
//                Global.audio = true;
//            }else if("BotModMod3D".equals(bot.getName())){
//                Global.modelo3D = true;
//            }else if("BotModTex".equals(bot.getName())){
//                Global.texto = true;
//            }

            label.setText(dat);
            bot.setEnabled(true);
        }
    }
    
    private void CambiarImagenLabel(File path, JLabel label){
        BufferedImage read = null;
        try {
            read = ImageIO.read(path);
        } catch (IOException ex) {
            Logger.getLogger(ListarObra2.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
        //mostrar la imagen sin perder la relacion de aspecto
        float height = (float)read.getHeight();
        float width = (float)read.getWidth();
        float maxH = (float) 310;
        float maxV = (float) 270;
        float relacion = 1;
        
        if(height > width){ //imagen vertical
            relacion = height / maxV;
        }else if(width > height){ //imagen horizontal
            relacion =  width / maxH;
        }else{ //imagen cuadrada
            relacion = height / maxV;
        }
        
        //Image scaledInstance = read.getScaledInstance(290, 230, Image.SCALE_DEFAULT);
        Image scaledInstance = read.getScaledInstance((int)(width/relacion), (int)(height/relacion), Image.SCALE_DEFAULT);
        //im.getImage().flush();
        label.setIcon(new ImageIcon(scaledInstance));
    }

    private static int modificarContenidoObra(int idObra, java.lang.String tipo) {
        _109._2._0._10.server_php.Comision service = new _109._2._0._10.server_php.Comision();
        _109._2._0._10.server_php.ComisionPortType port = service.getComisionPort();
        return port.modificarContenidoObra(idObra, tipo);
    }

}
